
alternating_leds_button_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ba  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026d  00000000  00000000  00000f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b0  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  78:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
#define LED2 PB4
#define TOGGLE PB3

// Define what should happen when Low to High transition is detected
ISR(INT0_vect)
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
  94:	ef 93       	push	r30
  96:	ff 93       	push	r31
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1 << LED1); // Toggle LED1
  a0:	85 e2       	ldi	r24, 0x25	; 37
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	25 e2       	ldi	r18, 0x25	; 37
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	30 81       	ld	r19, Z
  ac:	20 e2       	ldi	r18, 0x20	; 32
  ae:	23 27       	eor	r18, r19
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	PORTB ^= (1 << LED2); // Toggle LED2
  b4:	85 e2       	ldi	r24, 0x25	; 37
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	25 e2       	ldi	r18, 0x25	; 37
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	30 81       	ld	r19, Z
  c0:	20 e1       	ldi	r18, 0x10	; 16
  c2:	23 27       	eor	r18, r19
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	
}
  c8:	00 00       	nop
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	3f 91       	pop	r19
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <setup_interrupt>:

void setup_interrupt()
{
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1 << PD2); // Set pin 2 as input. Datasheet 13.2.1 for input/output. 13.4.9 for registers
  ee:	8a e2       	ldi	r24, 0x2A	; 42
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2a e2       	ldi	r18, 0x2A	; 42
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	f9 01       	movw	r30, r18
  f8:	20 81       	ld	r18, Z
  fa:	2b 7f       	andi	r18, 0xFB	; 251
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	PORTD |= (1 << PD2); // Enable internal pull-up resistor on pin 2
 100:	8b e2       	ldi	r24, 0x2B	; 43
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2b e2       	ldi	r18, 0x2B	; 43
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	24 60       	ori	r18, 0x04	; 4
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18

	// Pin Low to High triggers an interrupt. 12.2.1
	EICRA |= (1 << ISC01) | (1 << ISC00);
 112:	89 e6       	ldi	r24, 0x69	; 105
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	29 e6       	ldi	r18, 0x69	; 105
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	23 60       	ori	r18, 0x03	; 3
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18

	// Enable external interrupts. 12.2.2
	EIMSK |= (1 << INT0);
 124:	8d e3       	ldi	r24, 0x3D	; 61
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	2d e3       	ldi	r18, 0x3D	; 61
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	21 60       	ori	r18, 0x01	; 1
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18

	// Enable global interrupts
	sei();
 136:	78 94       	sei
}
 138:	00 00       	nop
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <setup_leds>:

void setup_leds()
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1 << LED1) | (1 << LED2) | (1 << TOGGLE);     // Set LED pins as output
 148:	84 e2       	ldi	r24, 0x24	; 36
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	24 e2       	ldi	r18, 0x24	; 36
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	28 63       	ori	r18, 0x38	; 56
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
	PORTB &= ~((1 << LED1) | (1 << LED2)); // Turn off both LEDs initially
 15a:	85 e2       	ldi	r24, 0x25	; 37
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	25 e2       	ldi	r18, 0x25	; 37
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	f9 01       	movw	r30, r18
 164:	20 81       	ld	r18, Z
 166:	2f 7c       	andi	r18, 0xCF	; 207
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
	PORTB ^= (1 << LED2); // Toggle LED2
 16c:	85 e2       	ldi	r24, 0x25	; 37
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	25 e2       	ldi	r18, 0x25	; 37
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	30 81       	ld	r19, Z
 178:	20 e1       	ldi	r18, 0x10	; 16
 17a:	23 27       	eor	r18, r19
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
}
 180:	00 00       	nop
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <main>:

int main()
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	setup_leds();
 190:	0e 94 a0 00 	call	0x140	; 0x140 <setup_leds>
	setup_interrupt();
 194:	0e 94 73 00 	call	0xe6	; 0xe6 <setup_interrupt>

	while (1)
	{
		// Main loop does nothing, all work is done in ISR
		PORTB ^= (1 << TOGGLE); 
 198:	85 e2       	ldi	r24, 0x25	; 37
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	25 e2       	ldi	r18, 0x25	; 37
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	30 81       	ld	r19, Z
 1a4:	28 e0       	ldi	r18, 0x08	; 8
 1a6:	23 27       	eor	r18, r19
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
	}
 1ac:	f5 cf       	rjmp	.-22     	; 0x198 <main+0x10>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
