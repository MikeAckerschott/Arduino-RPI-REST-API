
DecoderStudent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001c46  00001cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000105  0080011e  0080011e  00001cf8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000718  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001006a  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028e5  00000000  00000000  000124ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003cf1  00000000  00000000  00014dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001990  00000000  00000000  00018ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c21  00000000  00000000  0001a450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000092c2  00000000  00000000  0001d071  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  00026333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_11>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_16>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_18>
      4c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__vector_19>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	b5 04       	cpc	r11, r5
      6a:	d1 04       	cpc	r13, r1
      6c:	d1 04       	cpc	r13, r1
      6e:	ad 04       	cpc	r10, r13
      70:	d1 04       	cpc	r13, r1
      72:	d1 04       	cpc	r13, r1
      74:	a6 04       	cpc	r10, r6
      76:	ba 04       	cpc	r11, r10
      78:	d1 04       	cpc	r13, r1
      7a:	d1 04       	cpc	r13, r1
      7c:	d1 04       	cpc	r13, r1
      7e:	d1 04       	cpc	r13, r1
      80:	d1 04       	cpc	r13, r1
      82:	a9 04       	cpc	r10, r9
      84:	bf 04       	cpc	r11, r15
      86:	d1 04       	cpc	r13, r1
      88:	d1 04       	cpc	r13, r1
      8a:	b0 04       	cpc	r11, r0
      8c:	c8 04       	cpc	r12, r8
      8e:	a3 04       	cpc	r10, r3

00000090 <__trampolines_end>:
      90:	00 00       	nop
      92:	00 08       	sbc	r0, r0
      94:	00 02       	muls	r16, r16
      96:	01 00       	.word	0x0001	; ????
      98:	00 03       	mulsu	r16, r16
      9a:	04 07       	cpc	r16, r20
	...

000000a4 <digital_pin_to_bit_mask_PGM>:
      a4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b4:	04 08 10 20                                         ... 

000000b8 <digital_pin_to_port_PGM>:
      b8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      c8:	03 03 03 03                                         ....

000000cc <port_to_output_PGM>:
      cc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000d6 <port_to_mode_PGM>:
      d6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000e0 <__ctors_start>:
      e0:	50 05       	cpc	r21, r0
      e2:	00 07       	cpc	r16, r16

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d8 e0       	ldi	r29, 0x08	; 8
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	11 e0       	ldi	r17, 0x01	; 1
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	e6 e4       	ldi	r30, 0x46	; 70
      f8:	fc e1       	ldi	r31, 0x1C	; 28
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ae 31       	cpi	r26, 0x1E	; 30
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>

00000106 <__do_clear_bss>:
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	ae e1       	ldi	r26, 0x1E	; 30
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	01 c0       	rjmp	.+2      	; 0x110 <.do_clear_bss_start>

0000010e <.do_clear_bss_loop>:
     10e:	1d 92       	st	X+, r1

00000110 <.do_clear_bss_start>:
     110:	a3 32       	cpi	r26, 0x23	; 35
     112:	b2 07       	cpc	r27, r18
     114:	e1 f7       	brne	.-8      	; 0x10e <.do_clear_bss_loop>

00000116 <__do_global_ctors>:
     116:	10 e0       	ldi	r17, 0x00	; 0
     118:	c2 e7       	ldi	r28, 0x72	; 114
     11a:	d0 e0       	ldi	r29, 0x00	; 0
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__do_global_ctors+0x10>
     11e:	21 97       	sbiw	r28, 0x01	; 1
     120:	fe 01       	movw	r30, r28
     122:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__tablejump2__>
     126:	c0 37       	cpi	r28, 0x70	; 112
     128:	d1 07       	cpc	r29, r17
     12a:	c9 f7       	brne	.-14     	; 0x11e <__do_global_ctors+0x8>
     12c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <main>
     130:	0c 94 21 0e 	jmp	0x1c42	; 0x1c42 <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <_Z21setupLightDefinitionsv>:
    gatePosition[gate] = 0;
    gateStatus[gate] = CLOSED;
    myservo[gate].attach(GATEPINS[gate]);
    myservo[gate].write(gatePosition[gate]);
  }
}
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	8d e0       	ldi	r24, 0x0D	; 13
     142:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <LIGHTPINS>
     146:	8c e0       	ldi	r24, 0x0C	; 12
     148:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <LIGHTPINS+0x1>
     14c:	8b e0       	ldi	r24, 0x0B	; 11
     14e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <LIGHTPINS+0x2>
     152:	87 e0       	ldi	r24, 0x07	; 7
     154:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <LIGHTPINS+0x3>
     158:	86 e0       	ldi	r24, 0x06	; 6
     15a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <LIGHTPINS+0x4>
     15e:	85 e0       	ldi	r24, 0x05	; 5
     160:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <LIGHTPINS+0x5>
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <__data_end+0xf>
     16a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end+0x10>
     16e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0x11>
     172:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end+0xc>
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__data_end+0xd>
     17c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end+0xe>
     180:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x9>
     184:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end+0xa>
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__data_end+0xb>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end+0x6>
     194:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__data_end+0x7>
     198:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end+0x8>
     19c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__data_end+0x3>
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end+0x4>
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <__data_end+0x5>
     1ac:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
     1b0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__data_end+0x1>
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end+0x2>
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <blinkStatus>
     1c0:	00 00       	nop
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <_Z14setupLightPinsv>:
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <_Z14setupLightPinsv+0x6>
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	19 82       	std	Y+1, r1	; 0x01
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	08 f0       	brcs	.+2      	; 0x1dc <_Z14setupLightPinsv+0x14>
     1da:	52 c0       	rjmp	.+164    	; 0x280 <_Z14setupLightPinsv+0xb8>
     1dc:	1a 82       	std	Y+2, r1	; 0x02
     1de:	8a 81       	ldd	r24, Y+2	; 0x02
     1e0:	83 30       	cpi	r24, 0x03	; 3
     1e2:	08 f0       	brcs	.+2      	; 0x1e6 <_Z14setupLightPinsv+0x1e>
     1e4:	41 c0       	rjmp	.+130    	; 0x268 <_Z14setupLightPinsv+0xa0>
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	28 2f       	mov	r18, r24
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	8a 81       	ldd	r24, Y+2	; 0x02
     1ee:	48 2f       	mov	r20, r24
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	c9 01       	movw	r24, r18
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	82 0f       	add	r24, r18
     1fa:	93 1f       	adc	r25, r19
     1fc:	84 0f       	add	r24, r20
     1fe:	95 1f       	adc	r25, r21
     200:	80 5d       	subi	r24, 0xD0	; 208
     202:	9e 4f       	sbci	r25, 0xFE	; 254
     204:	fc 01       	movw	r30, r24
     206:	80 81       	ld	r24, Z
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	0e 94 8e 08 	call	0x111c	; 0x111c <pinMode>
     20e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <country>
     212:	28 2f       	mov	r18, r24
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	8a 81       	ldd	r24, Y+2	; 0x02
     218:	48 2f       	mov	r20, r24
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	c9 01       	movw	r24, r18
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	82 0f       	add	r24, r18
     22c:	93 1f       	adc	r25, r19
     22e:	84 0f       	add	r24, r20
     230:	95 1f       	adc	r25, r21
     232:	8c 5d       	subi	r24, 0xDC	; 220
     234:	9e 4f       	sbci	r25, 0xFE	; 254
     236:	fc 01       	movw	r30, r24
     238:	60 81       	ld	r22, Z
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	28 2f       	mov	r18, r24
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	8a 81       	ldd	r24, Y+2	; 0x02
     242:	48 2f       	mov	r20, r24
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	c9 01       	movw	r24, r18
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	84 0f       	add	r24, r20
     252:	95 1f       	adc	r25, r21
     254:	80 5d       	subi	r24, 0xD0	; 208
     256:	9e 4f       	sbci	r25, 0xFE	; 254
     258:	fc 01       	movw	r30, r24
     25a:	80 81       	ld	r24, Z
     25c:	0e 94 ca 08 	call	0x1194	; 0x1194 <digitalWrite>
     260:	8a 81       	ldd	r24, Y+2	; 0x02
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	8a 83       	std	Y+2, r24	; 0x02
     266:	bb cf       	rjmp	.-138    	; 0x1de <_Z14setupLightPinsv+0x16>
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	88 2f       	mov	r24, r24
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	8a 5c       	subi	r24, 0xCA	; 202
     270:	9e 4f       	sbci	r25, 0xFE	; 254
     272:	22 e0       	ldi	r18, 0x02	; 2
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	8f 5f       	subi	r24, 0xFF	; 255
     27c:	89 83       	std	Y+1, r24	; 0x01
     27e:	aa cf       	rjmp	.-172    	; 0x1d4 <_Z14setupLightPinsv+0xc>
     280:	00 00       	nop
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <setup>:

// initialize system; at startup no test
void setup() {
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
  setupLightDefinitions();
     294:	0e 94 9c 00 	call	0x138	; 0x138 <_Z21setupLightDefinitionsv>
  setupLightPins();
     298:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z14setupLightPinsv>
  TESTLIGHTINTERVAL = 1000;
     29c:	88 ee       	ldi	r24, 0xE8	; 232
     29e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <TESTLIGHTINTERVAL>
  lightsRunTestStatus = LIGHTSRUNNING;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <lightsRunTestStatus>
  gatesRunTestStatus = GATERUNNING;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <gatesRunTestStatus>
  Serial.begin(9600, SERIAL_7E2);
     2ae:	2c e2       	ldi	r18, 0x2C	; 44
     2b0:	40 e8       	ldi	r20, 0x80	; 128
     2b2:	55 e2       	ldi	r21, 0x25	; 37
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	82 e5       	ldi	r24, 0x52	; 82
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	0e 94 39 06 	call	0xc72	; 0xc72 <_ZN14HardwareSerial5beginEmh>
  Serial.setTimeout(500);
     2c0:	44 ef       	ldi	r20, 0xF4	; 244
     2c2:	51 e0       	ldi	r21, 0x01	; 1
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	82 e5       	ldi	r24, 0x52	; 82
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN6Stream10setTimeoutEm>
}
     2d0:	00 00       	nop
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <_Z12allLightsOffv>:

void allLightsOff() {
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	00 d0       	rcall	.+0      	; 0x2de <_Z12allLightsOffv+0x6>
     2de:	1f 92       	push	r1
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
  for (byte signal = 0; signal < NROFSIGNALS; signal++) {   //switch all lights off not in student version. Not specified
     2e4:	19 82       	std	Y+1, r1	; 0x01
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	18 f5       	brcc	.+70     	; 0x332 <_Z12allLightsOffv+0x5a>
    for (int light = 0; light < NROFLIGHTSPERSIGNAL; light++) {
     2ec:	1b 82       	std	Y+3, r1	; 0x03
     2ee:	1a 82       	std	Y+2, r1	; 0x02
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	9b 81       	ldd	r25, Y+3	; 0x03
     2f4:	03 97       	sbiw	r24, 0x03	; 3
     2f6:	cc f4       	brge	.+50     	; 0x32a <_Z12allLightsOffv+0x52>
      digitalWrite(LIGHTPINS[signal][light], OFF);
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	28 2f       	mov	r18, r24
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	c9 01       	movw	r24, r18
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	82 0f       	add	r24, r18
     306:	93 1f       	adc	r25, r19
     308:	2a 81       	ldd	r18, Y+2	; 0x02
     30a:	3b 81       	ldd	r19, Y+3	; 0x03
     30c:	82 0f       	add	r24, r18
     30e:	93 1f       	adc	r25, r19
     310:	80 5d       	subi	r24, 0xD0	; 208
     312:	9e 4f       	sbci	r25, 0xFE	; 254
     314:	fc 01       	movw	r30, r24
     316:	80 81       	ld	r24, Z
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	0e 94 ca 08 	call	0x1194	; 0x1194 <digitalWrite>
  Serial.setTimeout(500);
}

void allLightsOff() {
  for (byte signal = 0; signal < NROFSIGNALS; signal++) {   //switch all lights off not in student version. Not specified
    for (int light = 0; light < NROFLIGHTSPERSIGNAL; light++) {
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	9b 81       	ldd	r25, Y+3	; 0x03
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	9b 83       	std	Y+3, r25	; 0x03
     326:	8a 83       	std	Y+2, r24	; 0x02
     328:	e3 cf       	rjmp	.-58     	; 0x2f0 <_Z12allLightsOffv+0x18>
  Serial.begin(9600, SERIAL_7E2);
  Serial.setTimeout(500);
}

void allLightsOff() {
  for (byte signal = 0; signal < NROFSIGNALS; signal++) {   //switch all lights off not in student version. Not specified
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	89 83       	std	Y+1, r24	; 0x01
     330:	da cf       	rjmp	.-76     	; 0x2e6 <_Z12allLightsOffv+0xe>
    for (int light = 0; light < NROFLIGHTSPERSIGNAL; light++) {
      digitalWrite(LIGHTPINS[signal][light], OFF);
    }
  }
}
     332:	00 00       	nop
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <_Z16toggleLightsTestv>:

void toggleLightsTest() {
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
  lightsRunTestStatus = (lightsRunTestStatus == LIGHTSTESTING) ? LIGHTSRUNNING : LIGHTSTESTING;
     348:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <lightsRunTestStatus>
     34c:	88 23       	and	r24, r24
     34e:	11 f4       	brne	.+4      	; 0x354 <_Z16toggleLightsTestv+0x14>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	01 c0       	rjmp	.+2      	; 0x356 <_Z16toggleLightsTestv+0x16>
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <lightsRunTestStatus>
  testSignalNumber = 0;
     35a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <testSignalNumber>
  testLightNumber = 0;
     35e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <testLightNumber>
  allLightsOff();
     362:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z12allLightsOffv>
  if(lightsRunTestStatus){
     366:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <lightsRunTestStatus>
     36a:	88 23       	and	r24, r24
     36c:	11 f0       	breq	.+4      	; 0x372 <_Z16toggleLightsTestv+0x32>
    setupLightPins();
     36e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z14setupLightPinsv>
  }
}
     372:	00 00       	nop
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <_Z15toggleGatesTestv>:

void toggleGatesTest() {
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	1f 92       	push	r1
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
  gatesRunTestStatus = (gatesRunTestStatus == GATETESTING) ? GATETESTING : GATERUNNING;
     384:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <gatesRunTestStatus>
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	99 23       	and	r25, r25
     38c:	09 f4       	brne	.+2      	; 0x390 <_Z15toggleGatesTestv+0x16>
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <gatesRunTestStatus>
  for (byte gate = 0; gate < NROFGATES; gate++) {
     394:	19 82       	std	Y+1, r1	; 0x01
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	82 30       	cpi	r24, 0x02	; 2
     39a:	60 f4       	brcc	.+24     	; 0x3b4 <_Z15toggleGatesTestv+0x3a>
    gateStatus[gate] = OPENING;
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	88 2f       	mov	r24, r24
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	84 5c       	subi	r24, 0xC4	; 196
     3a4:	9e 4f       	sbci	r25, 0xFE	; 254
     3a6:	22 e0       	ldi	r18, 0x02	; 2
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
  }
}

void toggleGatesTest() {
  gatesRunTestStatus = (gatesRunTestStatus == GATETESTING) ? GATETESTING : GATERUNNING;
  for (byte gate = 0; gate < NROFGATES; gate++) {
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	8f 5f       	subi	r24, 0xFF	; 255
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	f1 cf       	rjmp	.-30     	; 0x396 <_Z15toggleGatesTestv+0x1c>
    gateStatus[gate] = OPENING;
  }
}
     3b4:	00 00       	nop
     3b6:	0f 90       	pop	r0
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <_Z10testLightsv>:

//in main loop testLights is called frequently to blink all lights of all signals one after the other
void testLights() {
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
  //long previousTestBlinkMillis;
  if ((millis() - previousTestBlinkMillis) >= TESTLIGHTINTERVAL) {
     3c6:	0e 94 01 08 	call	0x1002	; 0x1002 <millis>
     3ca:	9b 01       	movw	r18, r22
     3cc:	ac 01       	movw	r20, r24
     3ce:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <previousTestBlinkMillis>
     3d2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <previousTestBlinkMillis+0x1>
     3d6:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <previousTestBlinkMillis+0x2>
     3da:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <previousTestBlinkMillis+0x3>
     3de:	28 1b       	sub	r18, r24
     3e0:	39 0b       	sbc	r19, r25
     3e2:	4a 0b       	sbc	r20, r26
     3e4:	5b 0b       	sbc	r21, r27
     3e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <TESTLIGHTINTERVAL>
     3ea:	88 2f       	mov	r24, r24
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	a0 e0       	ldi	r26, 0x00	; 0
     3f0:	b0 e0       	ldi	r27, 0x00	; 0
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	28 17       	cp	r18, r24
     3f6:	39 07       	cpc	r19, r25
     3f8:	4a 07       	cpc	r20, r26
     3fa:	5b 07       	cpc	r21, r27
     3fc:	08 f4       	brcc	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	66 23       	and	r22, r22
     402:	09 f4       	brne	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     404:	4e c0       	rjmp	.+156    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
    previousTestBlinkMillis = millis();
     406:	0e 94 01 08 	call	0x1002	; 0x1002 <millis>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <previousTestBlinkMillis>
     412:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <previousTestBlinkMillis+0x1>
     416:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <previousTestBlinkMillis+0x2>
     41a:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <previousTestBlinkMillis+0x3>
    digitalWrite(LIGHTPINS[testSignalNumber][testLightNumber], LOW);
     41e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <testSignalNumber>
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <testLightNumber>
     42a:	48 2f       	mov	r20, r24
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	c9 01       	movw	r24, r18
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	82 0f       	add	r24, r18
     436:	93 1f       	adc	r25, r19
     438:	84 0f       	add	r24, r20
     43a:	95 1f       	adc	r25, r21
     43c:	80 5d       	subi	r24, 0xD0	; 208
     43e:	9e 4f       	sbci	r25, 0xFE	; 254
     440:	fc 01       	movw	r30, r24
     442:	80 81       	ld	r24, Z
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	0e 94 ca 08 	call	0x1194	; 0x1194 <digitalWrite>
    testLightNumber++;
     44a:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <testLightNumber>
     44e:	8f 5f       	subi	r24, 0xFF	; 255
     450:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <testLightNumber>
    if (testLightNumber >= NROFLIGHTSPERSIGNAL) {
     454:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <testLightNumber>
     458:	83 30       	cpi	r24, 0x03	; 3
     45a:	68 f0       	brcs	.+26     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
      testLightNumber = 0;
     45c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <testLightNumber>
      testSignalNumber++;
     460:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <testSignalNumber>
     464:	8f 5f       	subi	r24, 0xFF	; 255
     466:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <testSignalNumber>
      if (testSignalNumber >= NROFSIGNALS) {
     46a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <testSignalNumber>
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	10 f0       	brcs	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
        testSignalNumber = 0;
     472:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <testSignalNumber>
      }
    }
    digitalWrite(LIGHTPINS[testSignalNumber][testLightNumber], HIGH);
     476:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <testSignalNumber>
     47a:	28 2f       	mov	r18, r24
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <testLightNumber>
     482:	48 2f       	mov	r20, r24
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	c9 01       	movw	r24, r18
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	82 0f       	add	r24, r18
     48e:	93 1f       	adc	r25, r19
     490:	84 0f       	add	r24, r20
     492:	95 1f       	adc	r25, r21
     494:	80 5d       	subi	r24, 0xD0	; 208
     496:	9e 4f       	sbci	r25, 0xFE	; 254
     498:	fc 01       	movw	r30, r24
     49a:	80 81       	ld	r24, Z
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	0e 94 ca 08 	call	0x1194	; 0x1194 <digitalWrite>
  }
}
     4a2:	00 00       	nop
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <_Z9setSignalhh>:

//set certain signal to new aspect and set lights in that signal accordingly
void setSignal(byte signal, byte aspect) {
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <_Z9setSignalhh+0x6>
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <_Z9setSignalhh+0x8>
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	8b 83       	std	Y+3, r24	; 0x03
     4b8:	6c 83       	std	Y+4, r22	; 0x04
  if(lightsRunTestStatus == LIGHTSTESTING){ //ignore signal calls when LED testing is taking place
     4ba:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <lightsRunTestStatus>
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_Z9setSignalhh+0x1a>
     4c2:	89 c0       	rjmp	.+274    	; 0x5d6 <_Z9setSignalhh+0x12c>
	  return;
  }
  signalStatus[signal] = aspect;
     4c4:	8b 81       	ldd	r24, Y+3	; 0x03
     4c6:	88 2f       	mov	r24, r24
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	8a 5c       	subi	r24, 0xCA	; 202
     4cc:	9e 4f       	sbci	r25, 0xFE	; 254
     4ce:	2c 81       	ldd	r18, Y+4	; 0x04
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
  for (int light = 0; light < NROFLIGHTSPERSIGNAL; light++) {
     4d4:	1a 82       	std	Y+2, r1	; 0x02
     4d6:	19 82       	std	Y+1, r1	; 0x01
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	03 97       	sbiw	r24, 0x03	; 3
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <_Z9setSignalhh+0x38>
     4e0:	7b c0       	rjmp	.+246    	; 0x5d8 <_Z9setSignalhh+0x12e>
    if ((LIGHTS[country][aspect][light] == ON) || (LIGHTS[country][aspect][light] == OFF)) {
     4e2:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <country>
     4e6:	48 2f       	mov	r20, r24
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	8c 81       	ldd	r24, Y+4	; 0x04
     4ec:	88 2f       	mov	r24, r24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9c 01       	movw	r18, r24
     4f2:	22 0f       	add	r18, r18
     4f4:	33 1f       	adc	r19, r19
     4f6:	28 0f       	add	r18, r24
     4f8:	39 1f       	adc	r19, r25
     4fa:	ca 01       	movw	r24, r20
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	88 0f       	add	r24, r24
     506:	99 1f       	adc	r25, r25
     508:	84 0f       	add	r24, r20
     50a:	95 1f       	adc	r25, r21
     50c:	28 0f       	add	r18, r24
     50e:	39 1f       	adc	r19, r25
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	9a 81       	ldd	r25, Y+2	; 0x02
     514:	82 0f       	add	r24, r18
     516:	93 1f       	adc	r25, r19
     518:	82 5e       	subi	r24, 0xE2	; 226
     51a:	9e 4f       	sbci	r25, 0xFE	; 254
     51c:	fc 01       	movw	r30, r24
     51e:	80 81       	ld	r24, Z
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	09 f1       	breq	.+66     	; 0x566 <_Z9setSignalhh+0xbc>
     524:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <country>
     528:	48 2f       	mov	r20, r24
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	8c 81       	ldd	r24, Y+4	; 0x04
     52e:	88 2f       	mov	r24, r24
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	9c 01       	movw	r18, r24
     534:	22 0f       	add	r18, r18
     536:	33 1f       	adc	r19, r19
     538:	28 0f       	add	r18, r24
     53a:	39 1f       	adc	r19, r25
     53c:	ca 01       	movw	r24, r20
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	84 0f       	add	r24, r20
     54c:	95 1f       	adc	r25, r21
     54e:	28 0f       	add	r18, r24
     550:	39 1f       	adc	r19, r25
     552:	89 81       	ldd	r24, Y+1	; 0x01
     554:	9a 81       	ldd	r25, Y+2	; 0x02
     556:	82 0f       	add	r24, r18
     558:	93 1f       	adc	r25, r19
     55a:	82 5e       	subi	r24, 0xE2	; 226
     55c:	9e 4f       	sbci	r25, 0xFE	; 254
     55e:	fc 01       	movw	r30, r24
     560:	80 81       	ld	r24, Z
     562:	88 23       	and	r24, r24
     564:	91 f5       	brne	.+100    	; 0x5ca <_Z9setSignalhh+0x120>
      digitalWrite(LIGHTPINS[signal][light], LIGHTS[country][aspect][light]);
     566:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <country>
     56a:	48 2f       	mov	r20, r24
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	88 2f       	mov	r24, r24
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	9c 01       	movw	r18, r24
     576:	22 0f       	add	r18, r18
     578:	33 1f       	adc	r19, r19
     57a:	28 0f       	add	r18, r24
     57c:	39 1f       	adc	r19, r25
     57e:	ca 01       	movw	r24, r20
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	88 0f       	add	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	84 0f       	add	r24, r20
     58e:	95 1f       	adc	r25, r21
     590:	28 0f       	add	r18, r24
     592:	39 1f       	adc	r19, r25
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	9a 81       	ldd	r25, Y+2	; 0x02
     598:	82 0f       	add	r24, r18
     59a:	93 1f       	adc	r25, r19
     59c:	82 5e       	subi	r24, 0xE2	; 226
     59e:	9e 4f       	sbci	r25, 0xFE	; 254
     5a0:	fc 01       	movw	r30, r24
     5a2:	40 81       	ld	r20, Z
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	28 2f       	mov	r18, r24
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	c9 01       	movw	r24, r18
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	82 0f       	add	r24, r18
     5b2:	93 1f       	adc	r25, r19
     5b4:	29 81       	ldd	r18, Y+1	; 0x01
     5b6:	3a 81       	ldd	r19, Y+2	; 0x02
     5b8:	82 0f       	add	r24, r18
     5ba:	93 1f       	adc	r25, r19
     5bc:	80 5d       	subi	r24, 0xD0	; 208
     5be:	9e 4f       	sbci	r25, 0xFE	; 254
     5c0:	fc 01       	movw	r30, r24
     5c2:	80 81       	ld	r24, Z
     5c4:	64 2f       	mov	r22, r20
     5c6:	0e 94 ca 08 	call	0x1194	; 0x1194 <digitalWrite>
void setSignal(byte signal, byte aspect) {
  if(lightsRunTestStatus == LIGHTSTESTING){ //ignore signal calls when LED testing is taking place
	  return;
  }
  signalStatus[signal] = aspect;
  for (int light = 0; light < NROFLIGHTSPERSIGNAL; light++) {
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	9a 81       	ldd	r25, Y+2	; 0x02
     5ce:	01 96       	adiw	r24, 0x01	; 1
     5d0:	9a 83       	std	Y+2, r25	; 0x02
     5d2:	89 83       	std	Y+1, r24	; 0x01
     5d4:	81 cf       	rjmp	.-254    	; 0x4d8 <_Z9setSignalhh+0x2e>
}

//set certain signal to new aspect and set lights in that signal accordingly
void setSignal(byte signal, byte aspect) {
  if(lightsRunTestStatus == LIGHTSTESTING){ //ignore signal calls when LED testing is taking place
	  return;
     5d6:	00 00       	nop
  for (int light = 0; light < NROFLIGHTSPERSIGNAL; light++) {
    if ((LIGHTS[country][aspect][light] == ON) || (LIGHTS[country][aspect][light] == OFF)) {
      digitalWrite(LIGHTPINS[signal][light], LIGHTS[country][aspect][light]);
    }
  }
}
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <_Z11blinkLightsv>:

void blinkLights() {
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <_Z11blinkLightsv+0xe>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <_Z11blinkLightsv+0x10>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <_Z11blinkLightsv+0x12>
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
  if(lightsRunTestStatus == LIGHTSTESTING){ //ignore signal calls when LED testing is taking place
     5fc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <lightsRunTestStatus>
     600:	88 23       	and	r24, r24
     602:	09 f4       	brne	.+2      	; 0x606 <_Z11blinkLightsv+0x20>
     604:	86 c0       	rjmp	.+268    	; 0x712 <_Z11blinkLightsv+0x12c>
    return;
  }
  long currentBlinkMillis = millis();
     606:	0e 94 01 08 	call	0x1002	; 0x1002 <millis>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	8b 83       	std	Y+3, r24	; 0x03
     610:	9c 83       	std	Y+4, r25	; 0x04
     612:	ad 83       	std	Y+5, r26	; 0x05
     614:	be 83       	std	Y+6, r27	; 0x06
  if (currentBlinkMillis - previousBlinkMillis >= BLINKINTERVAL) {
     616:	2b 81       	ldd	r18, Y+3	; 0x03
     618:	3c 81       	ldd	r19, Y+4	; 0x04
     61a:	4d 81       	ldd	r20, Y+5	; 0x05
     61c:	5e 81       	ldd	r21, Y+6	; 0x06
     61e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <previousBlinkMillis>
     622:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <previousBlinkMillis+0x1>
     626:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <previousBlinkMillis+0x2>
     62a:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <previousBlinkMillis+0x3>
     62e:	79 01       	movw	r14, r18
     630:	8a 01       	movw	r16, r20
     632:	e8 1a       	sub	r14, r24
     634:	f9 0a       	sbc	r15, r25
     636:	0a 0b       	sbc	r16, r26
     638:	1b 0b       	sbc	r17, r27
     63a:	d8 01       	movw	r26, r16
     63c:	c7 01       	movw	r24, r14
     63e:	84 3f       	cpi	r24, 0xF4	; 244
     640:	91 40       	sbci	r25, 0x01	; 1
     642:	a1 05       	cpc	r26, r1
     644:	b1 05       	cpc	r27, r1
     646:	08 f4       	brcc	.+2      	; 0x64a <_Z11blinkLightsv+0x64>
     648:	65 c0       	rjmp	.+202    	; 0x714 <_Z11blinkLightsv+0x12e>
    previousBlinkMillis = currentBlinkMillis;
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	9c 81       	ldd	r25, Y+4	; 0x04
     64e:	ad 81       	ldd	r26, Y+5	; 0x05
     650:	be 81       	ldd	r27, Y+6	; 0x06
     652:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <previousBlinkMillis>
     656:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <previousBlinkMillis+0x1>
     65a:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <previousBlinkMillis+0x2>
     65e:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <previousBlinkMillis+0x3>
    for (byte signal = 0; signal < NROFSIGNALS; signal++) {
     662:	19 82       	std	Y+1, r1	; 0x01
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	82 30       	cpi	r24, 0x02	; 2
     668:	08 f0       	brcs	.+2      	; 0x66c <_Z11blinkLightsv+0x86>
     66a:	4a c0       	rjmp	.+148    	; 0x700 <_Z11blinkLightsv+0x11a>
      for (byte light = 0; light < NROFLIGHTSPERSIGNAL; light++) {
     66c:	1a 82       	std	Y+2, r1	; 0x02
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	83 30       	cpi	r24, 0x03	; 3
     672:	08 f0       	brcs	.+2      	; 0x676 <_Z11blinkLightsv+0x90>
     674:	41 c0       	rjmp	.+130    	; 0x6f8 <_Z11blinkLightsv+0x112>
        if (LIGHTS[country][signalStatus[signal]][light] == BLINK) {
     676:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <country>
     67a:	48 2f       	mov	r20, r24
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	88 2f       	mov	r24, r24
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	8a 5c       	subi	r24, 0xCA	; 202
     686:	9e 4f       	sbci	r25, 0xFE	; 254
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	88 2f       	mov	r24, r24
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	2a 81       	ldd	r18, Y+2	; 0x02
     692:	62 2f       	mov	r22, r18
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	9c 01       	movw	r18, r24
     698:	22 0f       	add	r18, r18
     69a:	33 1f       	adc	r19, r19
     69c:	28 0f       	add	r18, r24
     69e:	39 1f       	adc	r19, r25
     6a0:	ca 01       	movw	r24, r20
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	88 0f       	add	r24, r24
     6ac:	99 1f       	adc	r25, r25
     6ae:	84 0f       	add	r24, r20
     6b0:	95 1f       	adc	r25, r21
     6b2:	82 0f       	add	r24, r18
     6b4:	93 1f       	adc	r25, r19
     6b6:	86 0f       	add	r24, r22
     6b8:	97 1f       	adc	r25, r23
     6ba:	82 5e       	subi	r24, 0xE2	; 226
     6bc:	9e 4f       	sbci	r25, 0xFE	; 254
     6be:	fc 01       	movw	r30, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	82 30       	cpi	r24, 0x02	; 2
     6c4:	a9 f4       	brne	.+42     	; 0x6f0 <_Z11blinkLightsv+0x10a>
          digitalWrite(LIGHTPINS[signal][light], blinkStatus);
     6c6:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <blinkStatus>
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	48 2f       	mov	r20, r24
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	c9 01       	movw	r24, r18
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	82 0f       	add	r24, r18
     6de:	93 1f       	adc	r25, r19
     6e0:	84 0f       	add	r24, r20
     6e2:	95 1f       	adc	r25, r21
     6e4:	80 5d       	subi	r24, 0xD0	; 208
     6e6:	9e 4f       	sbci	r25, 0xFE	; 254
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	0e 94 ca 08 	call	0x1194	; 0x1194 <digitalWrite>
  }
  long currentBlinkMillis = millis();
  if (currentBlinkMillis - previousBlinkMillis >= BLINKINTERVAL) {
    previousBlinkMillis = currentBlinkMillis;
    for (byte signal = 0; signal < NROFSIGNALS; signal++) {
      for (byte light = 0; light < NROFLIGHTSPERSIGNAL; light++) {
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	8f 5f       	subi	r24, 0xFF	; 255
     6f4:	8a 83       	std	Y+2, r24	; 0x02
     6f6:	bb cf       	rjmp	.-138    	; 0x66e <_Z11blinkLightsv+0x88>
    return;
  }
  long currentBlinkMillis = millis();
  if (currentBlinkMillis - previousBlinkMillis >= BLINKINTERVAL) {
    previousBlinkMillis = currentBlinkMillis;
    for (byte signal = 0; signal < NROFSIGNALS; signal++) {
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	b2 cf       	rjmp	.-156    	; 0x664 <_Z11blinkLightsv+0x7e>
        if (LIGHTS[country][signalStatus[signal]][light] == BLINK) {
          digitalWrite(LIGHTPINS[signal][light], blinkStatus);
        }
      }
    }
    blinkStatus = (blinkStatus == HIGH) ? LOW : HIGH;
     700:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <blinkStatus>
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	91 30       	cpi	r25, 0x01	; 1
     708:	09 f4       	brne	.+2      	; 0x70c <_Z11blinkLightsv+0x126>
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <blinkStatus>
     710:	01 c0       	rjmp	.+2      	; 0x714 <_Z11blinkLightsv+0x12e>
  }
}

void blinkLights() {
  if(lightsRunTestStatus == LIGHTSTESTING){ //ignore signal calls when LED testing is taking place
    return;
     712:	00 00       	nop
        }
      }
    }
    blinkStatus = (blinkStatus == HIGH) ? LOW : HIGH;
  }
}
     714:	26 96       	adiw	r28, 0x06	; 6
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	08 95       	ret

0000072e <_Z9moveGatesv>:

void moveGates() {
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	00 d0       	rcall	.+0      	; 0x734 <_Z9moveGatesv+0x6>
     734:	00 d0       	rcall	.+0      	; 0x736 <_Z9moveGatesv+0x8>
     736:	1f 92       	push	r1
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
  long currentMillis = millis();
     73c:	0e 94 01 08 	call	0x1002	; 0x1002 <millis>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	8a 83       	std	Y+2, r24	; 0x02
     746:	9b 83       	std	Y+3, r25	; 0x03
     748:	ac 83       	std	Y+4, r26	; 0x04
     74a:	bd 83       	std	Y+5, r27	; 0x05
  if ((currentMillis - previousGateMillis) >= gateInterval) {
     74c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <previousGateMillis>
     750:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <previousGateMillis+0x1>
     754:	cc 01       	movw	r24, r24
     756:	a0 e0       	ldi	r26, 0x00	; 0
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	2a 81       	ldd	r18, Y+2	; 0x02
     75c:	3b 81       	ldd	r19, Y+3	; 0x03
     75e:	4c 81       	ldd	r20, Y+4	; 0x04
     760:	5d 81       	ldd	r21, Y+5	; 0x05
     762:	28 1b       	sub	r18, r24
     764:	39 0b       	sbc	r19, r25
     766:	4a 0b       	sbc	r20, r26
     768:	5b 0b       	sbc	r21, r27
     76a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <gateInterval>
     76e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <gateInterval+0x1>
     772:	09 2e       	mov	r0, r25
     774:	00 0c       	add	r0, r0
     776:	aa 0b       	sbc	r26, r26
     778:	bb 0b       	sbc	r27, r27
     77a:	28 17       	cp	r18, r24
     77c:	39 07       	cpc	r19, r25
     77e:	4a 07       	cpc	r20, r26
     780:	5b 07       	cpc	r21, r27
     782:	0c f4       	brge	.+2      	; 0x786 <_Z9moveGatesv+0x58>
     784:	8b c0       	rjmp	.+278    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
    previousGateMillis = currentMillis;
     786:	8a 81       	ldd	r24, Y+2	; 0x02
     788:	9b 81       	ldd	r25, Y+3	; 0x03
     78a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <previousGateMillis+0x1>
     78e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <previousGateMillis>
    for (byte gate = 0; gate < NROFGATES; gate++) {
     792:	19 82       	std	Y+1, r1	; 0x01
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	82 30       	cpi	r24, 0x02	; 2
     798:	08 f0       	brcs	.+2      	; 0x79c <_Z9moveGatesv+0x6e>
     79a:	80 c0       	rjmp	.+256    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
      if (gateStatus[gate] == OPENING) {
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	88 2f       	mov	r24, r24
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	84 5c       	subi	r24, 0xC4	; 196
     7a4:	9e 4f       	sbci	r25, 0xFE	; 254
     7a6:	fc 01       	movw	r30, r24
     7a8:	80 81       	ld	r24, Z
     7aa:	82 30       	cpi	r24, 0x02	; 2
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <_Z9moveGatesv+0x82>
     7ae:	44 c0       	rjmp	.+136    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
        gatePosition[gate] = (gatePosition[gate] + GATEINCREMENT);
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	29 81       	ldd	r18, Y+1	; 0x01
     7b8:	22 2f       	mov	r18, r18
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	26 5b       	subi	r18, 0xB6	; 182
     7be:	3e 4f       	sbci	r19, 0xFE	; 254
     7c0:	f9 01       	movw	r30, r18
     7c2:	20 81       	ld	r18, Z
     7c4:	2e 5f       	subi	r18, 0xFE	; 254
     7c6:	86 5b       	subi	r24, 0xB6	; 182
     7c8:	9e 4f       	sbci	r25, 0xFE	; 254
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
        if (gatePosition[gate] > GATEMAXPOSITION) {
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	86 5b       	subi	r24, 0xB6	; 182
     7d6:	9e 4f       	sbci	r25, 0xFE	; 254
     7d8:	fc 01       	movw	r30, r24
     7da:	80 81       	ld	r24, Z
     7dc:	85 3b       	cpi	r24, 0xB5	; 181
     7de:	a8 f0       	brcs	.+42     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
          if (gatesRunTestStatus == GATERUNNING) {
     7e0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <gatesRunTestStatus>
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	41 f4       	brne	.+16     	; 0x7f8 <_Z9moveGatesv+0xca>
            gateStatus[gate] = OPEN;
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	88 2f       	mov	r24, r24
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	84 5c       	subi	r24, 0xC4	; 196
     7f0:	9e 4f       	sbci	r25, 0xFE	; 254
     7f2:	fc 01       	movw	r30, r24
     7f4:	10 82       	st	Z, r1
     7f6:	4e c0       	rjmp	.+156    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
          } else
            gateStatus[gate] = CLOSING;
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	88 2f       	mov	r24, r24
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	84 5c       	subi	r24, 0xC4	; 196
     800:	9e 4f       	sbci	r25, 0xFE	; 254
     802:	23 e0       	ldi	r18, 0x03	; 3
     804:	fc 01       	movw	r30, r24
     806:	20 83       	st	Z, r18
     808:	45 c0       	rjmp	.+138    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
        } else {
          myservo[gate].write(gatePosition[gate]);
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	88 2f       	mov	r24, r24
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	86 5b       	subi	r24, 0xB6	; 182
     812:	9e 4f       	sbci	r25, 0xFE	; 254
     814:	fc 01       	movw	r30, r24
     816:	80 81       	ld	r24, Z
     818:	48 2f       	mov	r20, r24
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	28 2f       	mov	r18, r24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	c9 01       	movw	r24, r18
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	82 0f       	add	r24, r18
     82a:	93 1f       	adc	r25, r19
     82c:	84 5b       	subi	r24, 0xB4	; 180
     82e:	9e 4f       	sbci	r25, 0xFE	; 254
     830:	ba 01       	movw	r22, r20
     832:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN5Servo5writeEi>
     836:	2e c0       	rjmp	.+92     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
        }
      } else if (gateStatus[gate] == CLOSING) {
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	88 2f       	mov	r24, r24
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	84 5c       	subi	r24, 0xC4	; 196
     840:	9e 4f       	sbci	r25, 0xFE	; 254
     842:	fc 01       	movw	r30, r24
     844:	80 81       	ld	r24, Z
     846:	83 30       	cpi	r24, 0x03	; 3
     848:	29 f5       	brne	.+74     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
        gatePosition[gate] = (gatePosition[gate] - GATEINCREMENT);
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	88 2f       	mov	r24, r24
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	29 81       	ldd	r18, Y+1	; 0x01
     852:	22 2f       	mov	r18, r18
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	26 5b       	subi	r18, 0xB6	; 182
     858:	3e 4f       	sbci	r19, 0xFE	; 254
     85a:	f9 01       	movw	r30, r18
     85c:	20 81       	ld	r18, Z
     85e:	22 50       	subi	r18, 0x02	; 2
     860:	86 5b       	subi	r24, 0xB6	; 182
     862:	9e 4f       	sbci	r25, 0xFE	; 254
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
          if (gatesRunTestStatus == GATERUNNING) {
            gateStatus[gate] = CLOSED;
          } else
            gateStatus[gate] = OPENING;
        } else {
          myservo[gate].write(gatePosition[gate]);
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	88 2f       	mov	r24, r24
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	86 5b       	subi	r24, 0xB6	; 182
     870:	9e 4f       	sbci	r25, 0xFE	; 254
     872:	fc 01       	movw	r30, r24
     874:	80 81       	ld	r24, Z
     876:	48 2f       	mov	r20, r24
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	28 2f       	mov	r18, r24
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	c9 01       	movw	r24, r18
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	82 0f       	add	r24, r18
     888:	93 1f       	adc	r25, r19
     88a:	84 5b       	subi	r24, 0xB4	; 180
     88c:	9e 4f       	sbci	r25, 0xFE	; 254
     88e:	ba 01       	movw	r22, r20
     890:	0e 94 26 0b 	call	0x164c	; 0x164c <_ZN5Servo5writeEi>

void moveGates() {
  long currentMillis = millis();
  if ((currentMillis - previousGateMillis) >= gateInterval) {
    previousGateMillis = currentMillis;
    for (byte gate = 0; gate < NROFGATES; gate++) {
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	7c cf       	rjmp	.-264    	; 0x794 <_Z9moveGatesv+0x66>
          myservo[gate].write(gatePosition[gate]);
        }
      }
    }
  }
}
     89c:	00 00       	nop
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <loop>:

void loop() {
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	28 97       	sbiw	r28, 0x08	; 8
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	f8 94       	cli
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	cd bf       	out	0x3d, r28	; 61
  if (Serial.available() > 0) {
     8d2:	82 e5       	ldi	r24, 0x52	; 82
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZN14HardwareSerial9availableEv>
     8da:	21 e0       	ldi	r18, 0x01	; 1
     8dc:	18 16       	cp	r1, r24
     8de:	19 06       	cpc	r1, r25
     8e0:	0c f0       	brlt	.+2      	; 0x8e4 <loop+0x36>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	22 23       	and	r18, r18
     8e6:	09 f4       	brne	.+2      	; 0x8ea <loop+0x3c>
     8e8:	60 c0       	rjmp	.+192    	; 0x9aa <__stack+0xab>
    String inputCommand = Serial.readString();
     8ea:	ce 01       	movw	r24, r28
     8ec:	03 96       	adiw	r24, 0x03	; 3
     8ee:	62 e5       	ldi	r22, 0x52	; 82
     8f0:	71 e0       	ldi	r23, 0x01	; 1
     8f2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <_ZN6Stream10readStringEv>
    byte firstLetterCommand = inputCommand[0];
     8f6:	ce 01       	movw	r24, r28
     8f8:	03 96       	adiw	r24, 0x03	; 3
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	0e 94 01 0a 	call	0x1402	; 0x1402 <_ZN6StringixEj>
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	89 83       	std	Y+1, r24	; 0x01
    byte signalOrGateNumber = inputCommand[1] - 49;
     908:	ce 01       	movw	r24, r28
     90a:	03 96       	adiw	r24, 0x03	; 3
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	0e 94 01 0a 	call	0x1402	; 0x1402 <_ZN6StringixEj>
     914:	fc 01       	movw	r30, r24
     916:	80 81       	ld	r24, Z
     918:	81 53       	subi	r24, 0x31	; 49
     91a:	8a 83       	std	Y+2, r24	; 0x02
    switch (firstLetterCommand) {
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	09 2e       	mov	r0, r25
     924:	00 0c       	add	r0, r0
     926:	aa 0b       	sbc	r26, r26
     928:	bb 0b       	sbc	r27, r27
     92a:	41 e4       	ldi	r20, 0x41	; 65
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	23 e1       	ldi	r18, 0x13	; 19
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	84 1b       	sub	r24, r20
     934:	95 0b       	sbc	r25, r21
     936:	28 17       	cp	r18, r24
     938:	39 07       	cpc	r19, r25
     93a:	98 f1       	brcs	.+102    	; 0x9a2 <__stack+0xa3>
     93c:	8c 5c       	subi	r24, 0xCC	; 204
     93e:	9f 4f       	sbci	r25, 0xFF	; 255
     940:	fc 01       	movw	r30, r24
     942:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__tablejump2__>
      case 'T': toggleLightsTest();
     946:	0e 94 a0 01 	call	0x340	; 0x340 <_Z16toggleLightsTestv>
        break;
     94a:	2b c0       	rjmp	.+86     	; 0x9a2 <__stack+0xa3>
      case 'G': toggleGatesTest();
     94c:	0e 94 bd 01 	call	0x37a	; 0x37a <_Z15toggleGatesTestv>
        break;
     950:	28 c0       	rjmp	.+80     	; 0x9a2 <__stack+0xa3>
      case 'N': country = NL;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <country>
		break;
     958:	24 c0       	rjmp	.+72     	; 0x9a2 <__stack+0xa3>
      case 'D': country = D;
     95a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <country>
        break;
     95e:	21 c0       	rjmp	.+66     	; 0x9a2 <__stack+0xa3>
      case 'R': setSignal(signalOrGateNumber, DRIVE);
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z9setSignalhh>
        break;
     968:	1c c0       	rjmp	.+56     	; 0x9a2 <__stack+0xa3>
      case 'A': setSignal(signalOrGateNumber, BRAKE);
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z9setSignalhh>
        break;
     972:	17 c0       	rjmp	.+46     	; 0x9a2 <__stack+0xa3>
      case 'H': setSignal(signalOrGateNumber, STOP);
     974:	62 e0       	ldi	r22, 0x02	; 2
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z9setSignalhh>
        break;
     97c:	12 c0       	rjmp	.+36     	; 0x9a2 <__stack+0xa3>
      case 'O': gateStatus[signalOrGateNumber] = OPENING;
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	88 2f       	mov	r24, r24
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	84 5c       	subi	r24, 0xC4	; 196
     986:	9e 4f       	sbci	r25, 0xFE	; 254
     988:	22 e0       	ldi	r18, 0x02	; 2
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
        break;
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__stack+0xa3>
      case 'S': gateStatus[signalOrGateNumber] = CLOSING;
     990:	8a 81       	ldd	r24, Y+2	; 0x02
     992:	88 2f       	mov	r24, r24
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	84 5c       	subi	r24, 0xC4	; 196
     998:	9e 4f       	sbci	r25, 0xFE	; 254
     99a:	23 e0       	ldi	r18, 0x03	; 3
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18
        break;
     9a0:	00 00       	nop
  }
}

void loop() {
  if (Serial.available() > 0) {
    String inputCommand = Serial.readString();
     9a2:	ce 01       	movw	r24, r28
     9a4:	03 96       	adiw	r24, 0x03	; 3
     9a6:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN6StringD1Ev>
        break;
      case 'S': gateStatus[signalOrGateNumber] = CLOSING;
        break;
    }
  }
  if (lightsRunTestStatus == LIGHTSTESTING) {
     9aa:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <lightsRunTestStatus>
     9ae:	88 23       	and	r24, r24
     9b0:	11 f4       	brne	.+4      	; 0x9b6 <__stack+0xb7>
    testLights();
     9b2:	0e 94 df 01 	call	0x3be	; 0x3be <_Z10testLightsv>
  }
  blinkLights();
     9b6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_Z11blinkLightsv>
  moveGates();
     9ba:	0e 94 97 03 	call	0x72e	; 0x72e <_Z9moveGatesv>
  gateInterval = map(analogRead(POTENTIOPIN), 0, 1023, MINGATEINTERVAL, MAXGATEINTERVAL);
     9be:	82 e0       	ldi	r24, 0x02	; 2
     9c0:	0e 94 48 08 	call	0x1090	; 0x1090 <analogRead>
     9c4:	09 2e       	mov	r0, r25
     9c6:	00 0c       	add	r0, r0
     9c8:	aa 0b       	sbc	r26, r26
     9ca:	bb 0b       	sbc	r27, r27
     9cc:	1f 92       	push	r1
     9ce:	1f 92       	push	r1
     9d0:	21 e0       	ldi	r18, 0x01	; 1
     9d2:	2f 93       	push	r18
     9d4:	24 ef       	ldi	r18, 0xF4	; 244
     9d6:	2f 93       	push	r18
     9d8:	0f 2e       	mov	r0, r31
     9da:	f5 e0       	ldi	r31, 0x05	; 5
     9dc:	af 2e       	mov	r10, r31
     9de:	b1 2c       	mov	r11, r1
     9e0:	c1 2c       	mov	r12, r1
     9e2:	d1 2c       	mov	r13, r1
     9e4:	f0 2d       	mov	r31, r0
     9e6:	ee 24       	eor	r14, r14
     9e8:	ea 94       	dec	r14
     9ea:	13 e0       	ldi	r17, 0x03	; 3
     9ec:	f1 2e       	mov	r15, r17
     9ee:	00 e0       	ldi	r16, 0x00	; 0
     9f0:	10 e0       	ldi	r17, 0x00	; 0
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	a9 01       	movw	r20, r18
     9f8:	bc 01       	movw	r22, r24
     9fa:	cd 01       	movw	r24, r26
     9fc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z3maplllll>
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <gateInterval+0x1>
     a10:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <gateInterval>
}
     a14:	00 00       	nop
     a16:	28 96       	adiw	r28, 0x08	; 8
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	df 90       	pop	r13
     a30:	cf 90       	pop	r12
     a32:	bf 90       	pop	r11
     a34:	af 90       	pop	r10
     a36:	08 95       	ret

00000a38 <_Z41__static_initialization_and_destruction_0ii>:
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	00 d0       	rcall	.+0      	; 0xa46 <_Z41__static_initialization_and_destruction_0ii+0xe>
     a46:	00 d0       	rcall	.+0      	; 0xa48 <_Z41__static_initialization_and_destruction_0ii+0x10>
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01
     a50:	7c 83       	std	Y+4, r23	; 0x04
     a52:	6b 83       	std	Y+3, r22	; 0x03
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	b1 f4       	brne	.+44     	; 0xa88 <_Z41__static_initialization_and_destruction_0ii+0x50>
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	91 f4       	brne	.+36     	; 0xa88 <_Z41__static_initialization_and_destruction_0ii+0x50>
const int MINGATEINTERVAL = 5;
const int MAXGATEINTERVAL = 500;

int gateInterval = 200;

Servo myservo[NROFGATES];
     a64:	8c e4       	ldi	r24, 0x4C	; 76
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	01 e0       	ldi	r16, 0x01	; 1
     a6a:	10 e0       	ldi	r17, 0x00	; 0
     a6c:	7c 01       	movw	r14, r24
     a6e:	0f 3f       	cpi	r16, 0xFF	; 255
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	18 07       	cpc	r17, r24
     a74:	49 f0       	breq	.+18     	; 0xa88 <_Z41__static_initialization_and_destruction_0ii+0x50>
     a76:	c7 01       	movw	r24, r14
     a78:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN5ServoC1Ev>
     a7c:	23 e0       	ldi	r18, 0x03	; 3
     a7e:	e2 0e       	add	r14, r18
     a80:	f1 1c       	adc	r15, r1
     a82:	01 50       	subi	r16, 0x01	; 1
     a84:	11 09       	sbc	r17, r1
     a86:	f3 cf       	rjmp	.-26     	; 0xa6e <_Z41__static_initialization_and_destruction_0ii+0x36>
    testLights();
  }
  blinkLights();
  moveGates();
  gateInterval = map(analogRead(POTENTIOPIN), 0, 1023, MINGATEINTERVAL, MAXGATEINTERVAL);
}
     a88:	00 00       	nop
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	08 95       	ret

00000aa0 <_GLOBAL__sub_I_LIGHTS>:
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	6f ef       	ldi	r22, 0xFF	; 255
     aaa:	7f ef       	ldi	r23, 0xFF	; 255
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 1c 05 	call	0xa38	; 0xa38 <_Z41__static_initialization_and_destruction_0ii>
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     aba:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     abc:	91 8d       	ldd	r25, Z+25	; 0x19
     abe:	22 8d       	ldd	r18, Z+26	; 0x1a
     ac0:	89 2f       	mov	r24, r25
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	80 5c       	subi	r24, 0xC0	; 192
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	82 1b       	sub	r24, r18
     aca:	91 09       	sbc	r25, r1
}
     acc:	8f 73       	andi	r24, 0x3F	; 63
     ace:	99 27       	eor	r25, r25
     ad0:	08 95       	ret

00000ad2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     ad2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     ad4:	91 8d       	ldd	r25, Z+25	; 0x19
     ad6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ad8:	98 17       	cp	r25, r24
     ada:	31 f0       	breq	.+12     	; 0xae8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     adc:	82 8d       	ldd	r24, Z+26	; 0x1a
     ade:	e8 0f       	add	r30, r24
     ae0:	f1 1d       	adc	r31, r1
     ae2:	85 8d       	ldd	r24, Z+29	; 0x1d
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     aec:	08 95       	ret

00000aee <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     aee:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     af0:	91 8d       	ldd	r25, Z+25	; 0x19
     af2:	82 8d       	ldd	r24, Z+26	; 0x1a
     af4:	98 17       	cp	r25, r24
     af6:	61 f0       	breq	.+24     	; 0xb10 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     af8:	82 8d       	ldd	r24, Z+26	; 0x1a
     afa:	df 01       	movw	r26, r30
     afc:	a8 0f       	add	r26, r24
     afe:	b1 1d       	adc	r27, r1
     b00:	5d 96       	adiw	r26, 0x1d	; 29
     b02:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     b04:	92 8d       	ldd	r25, Z+26	; 0x1a
     b06:	9f 5f       	subi	r25, 0xFF	; 255
     b08:	9f 73       	andi	r25, 0x3F	; 63
     b0a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     b14:	08 95       	ret

00000b16 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     b16:	fc 01       	movw	r30, r24
     b18:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     b1a:	44 8d       	ldd	r20, Z+28	; 0x1c
     b1c:	25 2f       	mov	r18, r21
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	84 2f       	mov	r24, r20
     b22:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     b24:	82 1b       	sub	r24, r18
     b26:	93 0b       	sbc	r25, r19
     b28:	54 17       	cp	r21, r20
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     b2c:	cf 96       	adiw	r24, 0x3f	; 63
     b2e:	08 95       	ret
  return tail - head - 1;
     b30:	01 97       	sbiw	r24, 0x01	; 1
}
     b32:	08 95       	ret

00000b34 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     b34:	86 ef       	ldi	r24, 0xF6	; 246
     b36:	96 e0       	ldi	r25, 0x06	; 6
     b38:	89 2b       	or	r24, r25
     b3a:	49 f0       	breq	.+18     	; 0xb4e <_Z14serialEventRunv+0x1a>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	89 2b       	or	r24, r25
     b42:	29 f0       	breq	.+10     	; 0xb4e <_Z14serialEventRunv+0x1a>
     b44:	0e 94 f6 06 	call	0xdec	; 0xdec <_Z17Serial0_availablev>
     b48:	81 11       	cpse	r24, r1
     b4a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     b4e:	08 95       	ret

00000b50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     b50:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     b52:	84 8d       	ldd	r24, Z+28	; 0x1c
     b54:	df 01       	movw	r26, r30
     b56:	a8 0f       	add	r26, r24
     b58:	b1 1d       	adc	r27, r1
     b5a:	a3 5a       	subi	r26, 0xA3	; 163
     b5c:	bf 4f       	sbci	r27, 0xFF	; 255
     b5e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     b60:	84 8d       	ldd	r24, Z+28	; 0x1c
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	8f 73       	andi	r24, 0x3F	; 63
     b68:	99 27       	eor	r25, r25
     b6a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     b6c:	a6 89       	ldd	r26, Z+22	; 0x16
     b6e:	b7 89       	ldd	r27, Z+23	; 0x17
     b70:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     b72:	a0 89       	ldd	r26, Z+16	; 0x10
     b74:	b1 89       	ldd	r27, Z+17	; 0x11
     b76:	8c 91       	ld	r24, X
     b78:	83 70       	andi	r24, 0x03	; 3
     b7a:	80 64       	ori	r24, 0x40	; 64
     b7c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     b7e:	93 8d       	ldd	r25, Z+27	; 0x1b
     b80:	84 8d       	ldd	r24, Z+28	; 0x1c
     b82:	98 13       	cpse	r25, r24
     b84:	06 c0       	rjmp	.+12     	; 0xb92 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     b86:	02 88       	ldd	r0, Z+18	; 0x12
     b88:	f3 89       	ldd	r31, Z+19	; 0x13
     b8a:	e0 2d       	mov	r30, r0
     b8c:	80 81       	ld	r24, Z
     b8e:	8f 7d       	andi	r24, 0xDF	; 223
     b90:	80 83       	st	Z, r24
     b92:	08 95       	ret

00000b94 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ec 01       	movw	r28, r24
  _written = true;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     ba6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ba8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     baa:	98 13       	cpse	r25, r24
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <_ZN14HardwareSerial5writeEh+0x24>
     bae:	e8 89       	ldd	r30, Y+16	; 0x10
     bb0:	f9 89       	ldd	r31, Y+17	; 0x11
     bb2:	80 81       	ld	r24, Z
     bb4:	85 fd       	sbrc	r24, 5
     bb6:	26 c0       	rjmp	.+76     	; 0xc04 <_ZN14HardwareSerial5writeEh+0x70>
     bb8:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     bba:	0b 8d       	ldd	r16, Y+27	; 0x1b
     bbc:	10 e0       	ldi	r17, 0x00	; 0
     bbe:	0f 5f       	subi	r16, 0xFF	; 255
     bc0:	1f 4f       	sbci	r17, 0xFF	; 255
     bc2:	0f 73       	andi	r16, 0x3F	; 63
     bc4:	11 27       	eor	r17, r17
     bc6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     bc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bca:	e8 12       	cpse	r14, r24
     bcc:	0c c0       	rjmp	.+24     	; 0xbe6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	07 fc       	sbrc	r0, 7
     bd2:	fa cf       	rjmp	.-12     	; 0xbc8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     bd4:	e8 89       	ldd	r30, Y+16	; 0x10
     bd6:	f9 89       	ldd	r31, Y+17	; 0x11
     bd8:	80 81       	ld	r24, Z
     bda:	85 ff       	sbrs	r24, 5
     bdc:	f5 cf       	rjmp	.-22     	; 0xbc8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     bde:	ce 01       	movw	r24, r28
     be0:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     be4:	f1 cf       	rjmp	.-30     	; 0xbc8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     be8:	fe 01       	movw	r30, r28
     bea:	e8 0f       	add	r30, r24
     bec:	f1 1d       	adc	r31, r1
     bee:	e3 5a       	subi	r30, 0xA3	; 163
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     bf4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     bf6:	f8 94       	cli
    _tx_buffer_head = i;
     bf8:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     bfa:	ea 89       	ldd	r30, Y+18	; 0x12
     bfc:	fb 89       	ldd	r31, Y+19	; 0x13
     bfe:	80 81       	ld	r24, Z
     c00:	80 62       	ori	r24, 0x20	; 32
     c02:	0a c0       	rjmp	.+20     	; 0xc18 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     c04:	9f b7       	in	r25, 0x3f	; 63
     c06:	f8 94       	cli
      *_udr = c;
     c08:	ee 89       	ldd	r30, Y+22	; 0x16
     c0a:	ff 89       	ldd	r31, Y+23	; 0x17
     c0c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     c0e:	e8 89       	ldd	r30, Y+16	; 0x10
     c10:	f9 89       	ldd	r31, Y+17	; 0x11
     c12:	80 81       	ld	r24, Z
     c14:	83 70       	andi	r24, 0x03	; 3
     c16:	80 64       	ori	r24, 0x40	; 64
     c18:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c1a:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	08 95       	ret

00000c2e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     c34:	88 8d       	ldd	r24, Y+24	; 0x18
     c36:	88 23       	and	r24, r24
     c38:	c9 f0       	breq	.+50     	; 0xc6c <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     c3a:	ea 89       	ldd	r30, Y+18	; 0x12
     c3c:	fb 89       	ldd	r31, Y+19	; 0x13
     c3e:	80 81       	ld	r24, Z
     c40:	85 fd       	sbrc	r24, 5
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <_ZN14HardwareSerial5flushEv+0x20>
     c44:	a8 89       	ldd	r26, Y+16	; 0x10
     c46:	b9 89       	ldd	r27, Y+17	; 0x11
     c48:	8c 91       	ld	r24, X
     c4a:	86 fd       	sbrc	r24, 6
     c4c:	0f c0       	rjmp	.+30     	; 0xc6c <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	07 fc       	sbrc	r0, 7
     c52:	f5 cf       	rjmp	.-22     	; 0xc3e <_ZN14HardwareSerial5flushEv+0x10>
     c54:	80 81       	ld	r24, Z
     c56:	85 ff       	sbrs	r24, 5
     c58:	f2 cf       	rjmp	.-28     	; 0xc3e <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     c5a:	a8 89       	ldd	r26, Y+16	; 0x10
     c5c:	b9 89       	ldd	r27, Y+17	; 0x11
     c5e:	8c 91       	ld	r24, X
     c60:	85 ff       	sbrs	r24, 5
     c62:	ed cf       	rjmp	.-38     	; 0xc3e <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     c64:	ce 01       	movw	r24, r28
     c66:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     c6a:	e7 cf       	rjmp	.-50     	; 0xc3a <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
     c82:	6a 01       	movw	r12, r20
     c84:	7b 01       	movw	r14, r22
     c86:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     c88:	e8 89       	ldd	r30, Y+16	; 0x10
     c8a:	f9 89       	ldd	r31, Y+17	; 0x11
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c90:	41 15       	cp	r20, r1
     c92:	51 4e       	sbci	r21, 0xE1	; 225
     c94:	61 05       	cpc	r22, r1
     c96:	71 05       	cpc	r23, r1
     c98:	b1 f0       	breq	.+44     	; 0xcc6 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	79 e0       	ldi	r23, 0x09	; 9
     c9e:	8d e3       	ldi	r24, 0x3D	; 61
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	a7 01       	movw	r20, r14
     ca4:	96 01       	movw	r18, r12
     ca6:	0e 94 92 0b 	call	0x1724	; 0x1724 <__udivmodsi4>
     caa:	da 01       	movw	r26, r20
     cac:	c9 01       	movw	r24, r18
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	a1 09       	sbc	r26, r1
     cb2:	b1 09       	sbc	r27, r1
     cb4:	b6 95       	lsr	r27
     cb6:	a7 95       	ror	r26
     cb8:	97 95       	ror	r25
     cba:	87 95       	ror	r24
     cbc:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     cbe:	21 15       	cp	r18, r1
     cc0:	80 e1       	ldi	r24, 0x10	; 16
     cc2:	38 07       	cpc	r19, r24
     cc4:	a8 f0       	brcs	.+42     	; 0xcf0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     cc6:	e8 89       	ldd	r30, Y+16	; 0x10
     cc8:	f9 89       	ldd	r31, Y+17	; 0x11
     cca:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ccc:	60 e8       	ldi	r22, 0x80	; 128
     cce:	74 e8       	ldi	r23, 0x84	; 132
     cd0:	8e e1       	ldi	r24, 0x1E	; 30
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a7 01       	movw	r20, r14
     cd6:	96 01       	movw	r18, r12
     cd8:	0e 94 92 0b 	call	0x1724	; 0x1724 <__udivmodsi4>
     cdc:	da 01       	movw	r26, r20
     cde:	c9 01       	movw	r24, r18
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	a1 09       	sbc	r26, r1
     ce4:	b1 09       	sbc	r27, r1
     ce6:	b6 95       	lsr	r27
     ce8:	a7 95       	ror	r26
     cea:	97 95       	ror	r25
     cec:	87 95       	ror	r24
     cee:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     cf0:	ec 85       	ldd	r30, Y+12	; 0x0c
     cf2:	fd 85       	ldd	r31, Y+13	; 0x0d
     cf4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     cf6:	ee 85       	ldd	r30, Y+14	; 0x0e
     cf8:	ff 85       	ldd	r31, Y+15	; 0x0f
     cfa:	20 83       	st	Z, r18

  _written = false;
     cfc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     cfe:	ec 89       	ldd	r30, Y+20	; 0x14
     d00:	fd 89       	ldd	r31, Y+21	; 0x15
     d02:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     d04:	ea 89       	ldd	r30, Y+18	; 0x12
     d06:	fb 89       	ldd	r31, Y+19	; 0x13
     d08:	80 81       	ld	r24, Z
     d0a:	80 61       	ori	r24, 0x10	; 16
     d0c:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     d0e:	ea 89       	ldd	r30, Y+18	; 0x12
     d10:	fb 89       	ldd	r31, Y+19	; 0x13
     d12:	80 81       	ld	r24, Z
     d14:	88 60       	ori	r24, 0x08	; 8
     d16:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     d18:	ea 89       	ldd	r30, Y+18	; 0x12
     d1a:	fb 89       	ldd	r31, Y+19	; 0x13
     d1c:	80 81       	ld	r24, Z
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     d22:	ea 89       	ldd	r30, Y+18	; 0x12
     d24:	fb 89       	ldd	r31, Y+19	; 0x13
     d26:	80 81       	ld	r24, Z
     d28:	8f 7d       	andi	r24, 0xDF	; 223
     d2a:	80 83       	st	Z, r24
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	df 90       	pop	r13
     d38:	cf 90       	pop	r12
     d3a:	08 95       	ret

00000d3c <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	2f 93       	push	r18
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     d50:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <Serial+0x10>
     d54:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <Serial+0x11>
     d58:	80 81       	ld	r24, Z
     d5a:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <Serial+0x16>
     d5e:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <Serial+0x17>
     d62:	82 fd       	sbrc	r24, 2
     d64:	12 c0       	rjmp	.+36     	; 0xd8a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     d66:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     d68:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <Serial+0x19>
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     d70:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <Serial+0x1a>
     d74:	82 17       	cp	r24, r18
     d76:	51 f0       	breq	.+20     	; 0xd8c <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     d78:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <Serial+0x19>
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ee 5a       	subi	r30, 0xAE	; 174
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     d84:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Serial+0x19>
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     d8a:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	2f 91       	pop	r18
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     da0:	1f 92       	push	r1
     da2:	0f 92       	push	r0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	2f 93       	push	r18
     dac:	3f 93       	push	r19
     dae:	4f 93       	push	r20
     db0:	5f 93       	push	r21
     db2:	6f 93       	push	r22
     db4:	7f 93       	push	r23
     db6:	8f 93       	push	r24
     db8:	9f 93       	push	r25
     dba:	af 93       	push	r26
     dbc:	bf 93       	push	r27
     dbe:	ef 93       	push	r30
     dc0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     dc2:	82 e5       	ldi	r24, 0x52	; 82
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     dca:	ff 91       	pop	r31
     dcc:	ef 91       	pop	r30
     dce:	bf 91       	pop	r27
     dd0:	af 91       	pop	r26
     dd2:	9f 91       	pop	r25
     dd4:	8f 91       	pop	r24
     dd6:	7f 91       	pop	r23
     dd8:	6f 91       	pop	r22
     dda:	5f 91       	pop	r21
     ddc:	4f 91       	pop	r20
     dde:	3f 91       	pop	r19
     de0:	2f 91       	pop	r18
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     dec:	82 e5       	ldi	r24, 0x52	; 82
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZN14HardwareSerial9availableEv>
     df4:	21 e0       	ldi	r18, 0x01	; 1
     df6:	89 2b       	or	r24, r25
     df8:	09 f4       	brne	.+2      	; 0xdfc <_Z17Serial0_availablev+0x10>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
}
     dfc:	82 2f       	mov	r24, r18
     dfe:	08 95       	ret

00000e00 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     e00:	e2 e5       	ldi	r30, 0x52	; 82
     e02:	f1 e0       	ldi	r31, 0x01	; 1
     e04:	13 82       	std	Z+3, r1	; 0x03
     e06:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     e08:	88 ee       	ldi	r24, 0xE8	; 232
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	84 83       	std	Z+4, r24	; 0x04
     e12:	95 83       	std	Z+5, r25	; 0x05
     e14:	a6 83       	std	Z+6, r26	; 0x06
     e16:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     e18:	8e e0       	ldi	r24, 0x0E	; 14
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
     e20:	85 ec       	ldi	r24, 0xC5	; 197
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	95 87       	std	Z+13, r25	; 0x0d
     e26:	84 87       	std	Z+12, r24	; 0x0c
     e28:	84 ec       	ldi	r24, 0xC4	; 196
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	97 87       	std	Z+15, r25	; 0x0f
     e2e:	86 87       	std	Z+14, r24	; 0x0e
     e30:	80 ec       	ldi	r24, 0xC0	; 192
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	91 8b       	std	Z+17, r25	; 0x11
     e36:	80 8b       	std	Z+16, r24	; 0x10
     e38:	81 ec       	ldi	r24, 0xC1	; 193
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	93 8b       	std	Z+19, r25	; 0x13
     e3e:	82 8b       	std	Z+18, r24	; 0x12
     e40:	82 ec       	ldi	r24, 0xC2	; 194
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	95 8b       	std	Z+21, r25	; 0x15
     e46:	84 8b       	std	Z+20, r24	; 0x14
     e48:	86 ec       	ldi	r24, 0xC6	; 198
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	97 8b       	std	Z+23, r25	; 0x17
     e4e:	86 8b       	std	Z+22, r24	; 0x16
     e50:	11 8e       	std	Z+25, r1	; 0x19
     e52:	12 8e       	std	Z+26, r1	; 0x1a
     e54:	13 8e       	std	Z+27, r1	; 0x1b
     e56:	14 8e       	std	Z+28, r1	; 0x1c
     e58:	08 95       	ret

00000e5a <initVariant>:
     e5a:	08 95       	ret

00000e5c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     e5c:	0e 94 0d 08 	call	0x101a	; 0x101a <init>

	initVariant();
     e60:	0e 94 2d 07 	call	0xe5a	; 0xe5a <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e64:	0e 94 46 01 	call	0x28c	; 0x28c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e68:	ca e9       	ldi	r28, 0x9A	; 154
     e6a:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     e6c:	0e 94 57 04 	call	0x8ae	; 0x8ae <loop>
		if (serialEventRun) serialEventRun();
     e70:	20 97       	sbiw	r28, 0x00	; 0
     e72:	e1 f3       	breq	.-8      	; 0xe6c <main+0x10>
     e74:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z14serialEventRunv>
     e78:	f9 cf       	rjmp	.-14     	; 0xe6c <main+0x10>

00000e7a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     e7a:	cf 92       	push	r12
     e7c:	df 92       	push	r13
     e7e:	ef 92       	push	r14
     e80:	ff 92       	push	r15
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	6c 01       	movw	r12, r24
     e8c:	7a 01       	movw	r14, r20
     e8e:	8b 01       	movw	r16, r22
  size_t n = 0;
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     e94:	ce 15       	cp	r28, r14
     e96:	df 05       	cpc	r29, r15
     e98:	81 f0       	breq	.+32     	; 0xeba <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
     e9a:	d8 01       	movw	r26, r16
     e9c:	6d 91       	ld	r22, X+
     e9e:	8d 01       	movw	r16, r26
     ea0:	d6 01       	movw	r26, r12
     ea2:	ed 91       	ld	r30, X+
     ea4:	fc 91       	ld	r31, X
     ea6:	01 90       	ld	r0, Z+
     ea8:	f0 81       	ld	r31, Z
     eaa:	e0 2d       	mov	r30, r0
     eac:	c6 01       	movw	r24, r12
     eae:	09 95       	icall
     eb0:	89 2b       	or	r24, r25
     eb2:	11 f0       	breq	.+4      	; 0xeb8 <_ZN5Print5writeEPKhj+0x3e>
     eb4:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     eb6:	ee cf       	rjmp	.-36     	; 0xe94 <_ZN5Print5writeEPKhj+0x1a>
     eb8:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
     eba:	c7 01       	movw	r24, r14
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	cf 90       	pop	r12
     ecc:	08 95       	ret

00000ece <_ZN6Stream9timedReadEv>:
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
     ed8:	0e 94 01 08 	call	0x1002	; 0x1002 <millis>
     edc:	68 87       	std	Y+8, r22	; 0x08
     ede:	79 87       	std	Y+9, r23	; 0x09
     ee0:	8a 87       	std	Y+10, r24	; 0x0a
     ee2:	9b 87       	std	Y+11, r25	; 0x0b
     ee4:	e8 81       	ld	r30, Y
     ee6:	f9 81       	ldd	r31, Y+1	; 0x01
     ee8:	02 84       	ldd	r0, Z+10	; 0x0a
     eea:	f3 85       	ldd	r31, Z+11	; 0x0b
     eec:	e0 2d       	mov	r30, r0
     eee:	ce 01       	movw	r24, r28
     ef0:	09 95       	icall
     ef2:	97 ff       	sbrs	r25, 7
     ef4:	17 c0       	rjmp	.+46     	; 0xf24 <_ZN6Stream9timedReadEv+0x56>
     ef6:	0e 94 01 08 	call	0x1002	; 0x1002 <millis>
     efa:	08 85       	ldd	r16, Y+8	; 0x08
     efc:	19 85       	ldd	r17, Y+9	; 0x09
     efe:	2a 85       	ldd	r18, Y+10	; 0x0a
     f00:	3b 85       	ldd	r19, Y+11	; 0x0b
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	80 1b       	sub	r24, r16
     f08:	91 0b       	sbc	r25, r17
     f0a:	a2 0b       	sbc	r26, r18
     f0c:	b3 0b       	sbc	r27, r19
     f0e:	0c 81       	ldd	r16, Y+4	; 0x04
     f10:	1d 81       	ldd	r17, Y+5	; 0x05
     f12:	2e 81       	ldd	r18, Y+6	; 0x06
     f14:	3f 81       	ldd	r19, Y+7	; 0x07
     f16:	80 17       	cp	r24, r16
     f18:	91 07       	cpc	r25, r17
     f1a:	a2 07       	cpc	r26, r18
     f1c:	b3 07       	cpc	r27, r19
     f1e:	10 f3       	brcs	.-60     	; 0xee4 <_ZN6Stream9timedReadEv+0x16>
     f20:	8f ef       	ldi	r24, 0xFF	; 255
     f22:	9f ef       	ldi	r25, 0xFF	; 255
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	08 95       	ret

00000f2e <_ZN6Stream10setTimeoutEm>:
     f2e:	fc 01       	movw	r30, r24
     f30:	44 83       	std	Z+4, r20	; 0x04
     f32:	55 83       	std	Z+5, r21	; 0x05
     f34:	66 83       	std	Z+6, r22	; 0x06
     f36:	77 83       	std	Z+7, r23	; 0x07
     f38:	08 95       	ret

00000f3a <_ZN6Stream10readStringEv>:

String Stream::readString()
{
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	ec 01       	movw	r28, r24
     f44:	8b 01       	movw	r16, r22
  String ret;
     f46:	6c e1       	ldi	r22, 0x1C	; 28
     f48:	71 e0       	ldi	r23, 0x01	; 1
     f4a:	0e 94 ab 09 	call	0x1356	; 0x1356 <_ZN6StringC1EPKc>
  int c = timedRead();
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 67 07 	call	0xece	; 0xece <_ZN6Stream9timedReadEv>
  while (c >= 0)
     f54:	97 fd       	sbrc	r25, 7
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <_ZN6Stream10readStringEv+0x28>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     f58:	68 2f       	mov	r22, r24
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN6String6concatEc>
     f60:	f6 cf       	rjmp	.-20     	; 0xf4e <_ZN6Stream10readStringEv+0x14>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
     f62:	ce 01       	movw	r24, r28
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	08 95       	ret

00000f6e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	af 93       	push	r26
     f82:	bf 93       	push	r27
     f84:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer0_millis>
     f88:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer0_millis+0x1>
     f8c:	a0 91 f2 01 	lds	r26, 0x01F2	; 0x8001f2 <timer0_millis+0x2>
     f90:	b0 91 f3 01 	lds	r27, 0x01F3	; 0x8001f3 <timer0_millis+0x3>
     f94:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <timer0_fract>
     f98:	23 e0       	ldi	r18, 0x03	; 3
     f9a:	23 0f       	add	r18, r19
     f9c:	2d 37       	cpi	r18, 0x7D	; 125
     f9e:	20 f4       	brcc	.+8      	; 0xfa8 <__vector_16+0x3a>
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	a1 1d       	adc	r26, r1
     fa4:	b1 1d       	adc	r27, r1
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <__vector_16+0x44>
     fa8:	26 e8       	ldi	r18, 0x86	; 134
     faa:	23 0f       	add	r18, r19
     fac:	02 96       	adiw	r24, 0x02	; 2
     fae:	a1 1d       	adc	r26, r1
     fb0:	b1 1d       	adc	r27, r1
     fb2:	20 93 ef 01 	sts	0x01EF, r18	; 0x8001ef <timer0_fract>
     fb6:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <timer0_millis>
     fba:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <timer0_millis+0x1>
     fbe:	a0 93 f2 01 	sts	0x01F2, r26	; 0x8001f2 <timer0_millis+0x2>
     fc2:	b0 93 f3 01 	sts	0x01F3, r27	; 0x8001f3 <timer0_millis+0x3>
     fc6:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <timer0_overflow_count>
     fca:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <timer0_overflow_count+0x1>
     fce:	a0 91 f6 01 	lds	r26, 0x01F6	; 0x8001f6 <timer0_overflow_count+0x2>
     fd2:	b0 91 f7 01 	lds	r27, 0x01F7	; 0x8001f7 <timer0_overflow_count+0x3>
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	a1 1d       	adc	r26, r1
     fda:	b1 1d       	adc	r27, r1
     fdc:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <timer0_overflow_count>
     fe0:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <timer0_overflow_count+0x1>
     fe4:	a0 93 f6 01 	sts	0x01F6, r26	; 0x8001f6 <timer0_overflow_count+0x2>
     fe8:	b0 93 f7 01 	sts	0x01F7, r27	; 0x8001f7 <timer0_overflow_count+0x3>
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	3f 91       	pop	r19
     ff6:	2f 91       	pop	r18
     ff8:	0f 90       	pop	r0
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	0f 90       	pop	r0
     ffe:	1f 90       	pop	r1
    1000:	18 95       	reti

00001002 <millis>:
    1002:	2f b7       	in	r18, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <timer0_millis>
    100a:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <timer0_millis+0x1>
    100e:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <timer0_millis+0x2>
    1012:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <timer0_millis+0x3>
    1016:	2f bf       	out	0x3f, r18	; 63
    1018:	08 95       	ret

0000101a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    101a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    101c:	84 b5       	in	r24, 0x24	; 36
    101e:	82 60       	ori	r24, 0x02	; 2
    1020:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1022:	84 b5       	in	r24, 0x24	; 36
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1028:	85 b5       	in	r24, 0x25	; 37
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    102e:	85 b5       	in	r24, 0x25	; 37
    1030:	81 60       	ori	r24, 0x01	; 1
    1032:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1034:	ee e6       	ldi	r30, 0x6E	; 110
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    103e:	e1 e8       	ldi	r30, 0x81	; 129
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1044:	80 81       	ld	r24, Z
    1046:	82 60       	ori	r24, 0x02	; 2
    1048:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    104a:	80 81       	ld	r24, Z
    104c:	81 60       	ori	r24, 0x01	; 1
    104e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1050:	e0 e8       	ldi	r30, 0x80	; 128
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    105a:	e1 eb       	ldi	r30, 0xB1	; 177
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	84 60       	ori	r24, 0x04	; 4
    1062:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1064:	e0 eb       	ldi	r30, 0xB0	; 176
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    106e:	ea e7       	ldi	r30, 0x7A	; 122
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	84 60       	ori	r24, 0x04	; 4
    1076:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1078:	80 81       	ld	r24, Z
    107a:	82 60       	ori	r24, 0x02	; 2
    107c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    107e:	80 81       	ld	r24, Z
    1080:	81 60       	ori	r24, 0x01	; 1
    1082:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1084:	80 81       	ld	r24, Z
    1086:	80 68       	ori	r24, 0x80	; 128
    1088:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    108a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    108e:	08 95       	ret

00001090 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1090:	8e 30       	cpi	r24, 0x0E	; 14
    1092:	08 f0       	brcs	.+2      	; 0x1096 <analogRead+0x6>
    1094:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1096:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <analog_reference>
    109a:	90 e4       	ldi	r25, 0x40	; 64
    109c:	29 9f       	mul	r18, r25
    109e:	90 01       	movw	r18, r0
    10a0:	11 24       	eor	r1, r1
    10a2:	87 70       	andi	r24, 0x07	; 7
    10a4:	82 2b       	or	r24, r18
    10a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    10aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10ae:	80 64       	ori	r24, 0x40	; 64
    10b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    10b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10b8:	86 fd       	sbrc	r24, 6
    10ba:	fc cf       	rjmp	.-8      	; 0x10b4 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    10bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    10c0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    10c4:	90 e0       	ldi	r25, 0x00	; 0
}
    10c6:	92 2b       	or	r25, r18
    10c8:	08 95       	ret

000010ca <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	81 f0       	breq	.+32     	; 0x10ee <turnOffPWM+0x24>
    10ce:	28 f4       	brcc	.+10     	; 0x10da <turnOffPWM+0x10>
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	99 f0       	breq	.+38     	; 0x10fa <turnOffPWM+0x30>
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	a1 f0       	breq	.+40     	; 0x1100 <turnOffPWM+0x36>
    10d8:	08 95       	ret
    10da:	87 30       	cpi	r24, 0x07	; 7
    10dc:	a9 f0       	breq	.+42     	; 0x1108 <turnOffPWM+0x3e>
    10de:	88 30       	cpi	r24, 0x08	; 8
    10e0:	b9 f0       	breq	.+46     	; 0x1110 <turnOffPWM+0x46>
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	d1 f4       	brne	.+52     	; 0x111a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    10e6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    10ea:	8f 7d       	andi	r24, 0xDF	; 223
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    10ee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    10f2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    10f4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    10f8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    10fa:	84 b5       	in	r24, 0x24	; 36
    10fc:	8f 77       	andi	r24, 0x7F	; 127
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1100:	84 b5       	in	r24, 0x24	; 36
    1102:	8f 7d       	andi	r24, 0xDF	; 223
    1104:	84 bd       	out	0x24, r24	; 36
    1106:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1108:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    110c:	8f 77       	andi	r24, 0x7F	; 127
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1110:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1114:	8f 7d       	andi	r24, 0xDF	; 223
    1116:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    111a:	08 95       	ret

0000111c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	fc 01       	movw	r30, r24
    1124:	ec 55       	subi	r30, 0x5C	; 92
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    112a:	fc 01       	movw	r30, r24
    112c:	e8 54       	subi	r30, 0x48	; 72
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1132:	88 23       	and	r24, r24
    1134:	61 f1       	breq	.+88     	; 0x118e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	fc 01       	movw	r30, r24
    113e:	ea 52       	subi	r30, 0x2A	; 42
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	c5 91       	lpm	r28, Z+
    1144:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1146:	fc 01       	movw	r30, r24
    1148:	e4 53       	subi	r30, 0x34	; 52
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	a5 91       	lpm	r26, Z+
    114e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1150:	61 11       	cpse	r22, r1
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1154:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1156:	f8 94       	cli
		*reg &= ~bit;
    1158:	88 81       	ld	r24, Y
    115a:	20 95       	com	r18
    115c:	82 23       	and	r24, r18
    115e:	88 83       	st	Y, r24
		*out &= ~bit;
    1160:	ec 91       	ld	r30, X
    1162:	2e 23       	and	r18, r30
    1164:	0b c0       	rjmp	.+22     	; 0x117c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1166:	62 30       	cpi	r22, 0x02	; 2
    1168:	61 f4       	brne	.+24     	; 0x1182 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    116a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    116c:	f8 94       	cli
		*reg &= ~bit;
    116e:	88 81       	ld	r24, Y
    1170:	32 2f       	mov	r19, r18
    1172:	30 95       	com	r19
    1174:	83 23       	and	r24, r19
    1176:	88 83       	st	Y, r24
		*out |= bit;
    1178:	ec 91       	ld	r30, X
    117a:	2e 2b       	or	r18, r30
    117c:	2c 93       	st	X, r18
		SREG = oldSREG;
    117e:	9f bf       	out	0x3f, r25	; 63
    1180:	06 c0       	rjmp	.+12     	; 0x118e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1182:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1184:	f8 94       	cli
		*reg |= bit;
    1186:	e8 81       	ld	r30, Y
    1188:	2e 2b       	or	r18, r30
    118a:	28 83       	st	Y, r18
		SREG = oldSREG;
    118c:	8f bf       	out	0x3f, r24	; 63
	}
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	f9 01       	movw	r30, r18
    11a0:	e0 57       	subi	r30, 0x70	; 112
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    11a6:	f9 01       	movw	r30, r18
    11a8:	ec 55       	subi	r30, 0x5C	; 92
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    11ae:	f9 01       	movw	r30, r18
    11b0:	e8 54       	subi	r30, 0x48	; 72
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    11b6:	cc 23       	and	r28, r28
    11b8:	c1 f0       	breq	.+48     	; 0x11ea <digitalWrite+0x56>
    11ba:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    11bc:	81 11       	cpse	r24, r1
    11be:	0e 94 65 08 	call	0x10ca	; 0x10ca <turnOffPWM>

	out = portOutputRegister(port);
    11c2:	ec 2f       	mov	r30, r28
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	e4 53       	subi	r30, 0x34	; 52
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	a5 91       	lpm	r26, Z+
    11d0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    11d2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    11d4:	f8 94       	cli

	if (val == LOW) {
    11d6:	11 11       	cpse	r17, r1
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <digitalWrite+0x4e>
		*out &= ~bit;
    11da:	8c 91       	ld	r24, X
    11dc:	d0 95       	com	r29
    11de:	d8 23       	and	r29, r24
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    11e2:	ec 91       	ld	r30, X
    11e4:	de 2b       	or	r29, r30
    11e6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    11e8:	9f bf       	out	0x3f, r25	; 63
}
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	08 95       	ret

000011f2 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    11f2:	4f 92       	push	r4
    11f4:	5f 92       	push	r5
    11f6:	6f 92       	push	r6
    11f8:	7f 92       	push	r7
    11fa:	af 92       	push	r10
    11fc:	bf 92       	push	r11
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	29 01       	movw	r4, r18
    1214:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1216:	9b 01       	movw	r18, r22
    1218:	ac 01       	movw	r20, r24
    121a:	24 19       	sub	r18, r4
    121c:	35 09       	sbc	r19, r5
    121e:	46 09       	sbc	r20, r6
    1220:	57 09       	sbc	r21, r7
    1222:	89 89       	ldd	r24, Y+17	; 0x11
    1224:	9a 89       	ldd	r25, Y+18	; 0x12
    1226:	ab 89       	ldd	r26, Y+19	; 0x13
    1228:	bc 89       	ldd	r27, Y+20	; 0x14
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	6a 19       	sub	r22, r10
    1230:	7b 09       	sbc	r23, r11
    1232:	8c 09       	sbc	r24, r12
    1234:	9d 09       	sbc	r25, r13
    1236:	0e 94 82 0b 	call	0x1704	; 0x1704 <__mulsi3>
    123a:	a8 01       	movw	r20, r16
    123c:	97 01       	movw	r18, r14
    123e:	24 19       	sub	r18, r4
    1240:	35 09       	sbc	r19, r5
    1242:	46 09       	sbc	r20, r6
    1244:	57 09       	sbc	r21, r7
    1246:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__divmodsi4>
    124a:	ca 01       	movw	r24, r20
    124c:	b9 01       	movw	r22, r18
    124e:	6a 0d       	add	r22, r10
    1250:	7b 1d       	adc	r23, r11
    1252:	8c 1d       	adc	r24, r12
    1254:	9d 1d       	adc	r25, r13
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	bf 90       	pop	r11
    1268:	af 90       	pop	r10
    126a:	7f 90       	pop	r7
    126c:	6f 90       	pop	r6
    126e:	5f 90       	pop	r5
    1270:	4f 90       	pop	r4
    1272:	08 95       	ret

00001274 <_ZN6StringD1Ev>:
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
    1274:	fc 01       	movw	r30, r24
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	11 f0       	breq	.+4      	; 0x1282 <_ZN6StringD1Ev+0xe>
    127e:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <free>
    1282:	08 95       	ret

00001284 <_ZN6String10invalidateEv>:
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ec 01       	movw	r28, r24
    128a:	88 81       	ld	r24, Y
    128c:	99 81       	ldd	r25, Y+1	; 0x01
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	11 f0       	breq	.+4      	; 0x1296 <_ZN6String10invalidateEv+0x12>
    1292:	0e 94 8b 0c 	call	0x1916	; 0x1916 <free>
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	18 82       	st	Y, r1
    129a:	1d 82       	std	Y+5, r1	; 0x05
    129c:	1c 82       	std	Y+4, r1	; 0x04
    129e:	1b 82       	std	Y+3, r1	; 0x03
    12a0:	1a 82       	std	Y+2, r1	; 0x02
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <_ZN6String12changeBufferEj>:
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	ec 01       	movw	r28, r24
    12b2:	8b 01       	movw	r16, r22
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	88 81       	ld	r24, Y
    12ba:	99 81       	ldd	r25, Y+1	; 0x01
    12bc:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <realloc>
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	31 f0       	breq	.+12     	; 0x12d0 <_ZN6String12changeBufferEj+0x28>
    12c4:	99 83       	std	Y+1, r25	; 0x01
    12c6:	88 83       	st	Y, r24
    12c8:	1b 83       	std	Y+3, r17	; 0x03
    12ca:	0a 83       	std	Y+2, r16	; 0x02
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <_ZN6String12changeBufferEj+0x2a>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	08 95       	ret

000012dc <_ZN6String7reserveEj>:
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	88 81       	ld	r24, Y
    12e4:	99 81       	ldd	r25, Y+1	; 0x01
    12e6:	89 2b       	or	r24, r25
    12e8:	29 f0       	breq	.+10     	; 0x12f4 <_ZN6String7reserveEj+0x18>
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	86 17       	cp	r24, r22
    12f0:	97 07       	cpc	r25, r23
    12f2:	60 f4       	brcc	.+24     	; 0x130c <_ZN6String7reserveEj+0x30>
    12f4:	ce 01       	movw	r24, r28
    12f6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <_ZN6String12changeBufferEj>
    12fa:	88 23       	and	r24, r24
    12fc:	41 f0       	breq	.+16     	; 0x130e <_ZN6String7reserveEj+0x32>
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	89 2b       	or	r24, r25
    1304:	19 f4       	brne	.+6      	; 0x130c <_ZN6String7reserveEj+0x30>
    1306:	e8 81       	ld	r30, Y
    1308:	f9 81       	ldd	r31, Y+1	; 0x01
    130a:	10 82       	st	Z, r1
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <_ZN6String4copyEPKcj>:
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    1322:	7b 01       	movw	r14, r22
    1324:	8a 01       	movw	r16, r20
    1326:	ba 01       	movw	r22, r20
    1328:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN6String7reserveEj>
    132c:	81 11       	cpse	r24, r1
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <_ZN6String4copyEPKcj+0x24>
    1330:	ce 01       	movw	r24, r28
    1332:	0e 94 42 09 	call	0x1284	; 0x1284 <_ZN6String10invalidateEv>
    1336:	07 c0       	rjmp	.+14     	; 0x1346 <_ZN6String4copyEPKcj+0x32>
    1338:	1d 83       	std	Y+5, r17	; 0x05
    133a:	0c 83       	std	Y+4, r16	; 0x04
    133c:	b7 01       	movw	r22, r14
    133e:	88 81       	ld	r24, Y
    1340:	99 81       	ldd	r25, Y+1	; 0x01
    1342:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <strcpy>
    1346:	ce 01       	movw	r24, r28
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	08 95       	ret

00001356 <_ZN6StringC1EPKc>:
    1356:	fc 01       	movw	r30, r24
    1358:	11 82       	std	Z+1, r1	; 0x01
    135a:	10 82       	st	Z, r1
    135c:	13 82       	std	Z+3, r1	; 0x03
    135e:	12 82       	std	Z+2, r1	; 0x02
    1360:	15 82       	std	Z+5, r1	; 0x05
    1362:	14 82       	std	Z+4, r1	; 0x04
    1364:	61 15       	cp	r22, r1
    1366:	71 05       	cpc	r23, r1
    1368:	51 f0       	breq	.+20     	; 0x137e <_ZN6StringC1EPKc+0x28>
    136a:	fb 01       	movw	r30, r22
    136c:	01 90       	ld	r0, Z+
    136e:	00 20       	and	r0, r0
    1370:	e9 f7       	brne	.-6      	; 0x136c <_ZN6StringC1EPKc+0x16>
    1372:	31 97       	sbiw	r30, 0x01	; 1
    1374:	af 01       	movw	r20, r30
    1376:	46 1b       	sub	r20, r22
    1378:	57 0b       	sbc	r21, r23
    137a:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <_ZN6String4copyEPKcj>
    137e:	08 95       	ret

00001380 <_ZN6String6concatEPKcj>:
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	61 15       	cp	r22, r1
    138e:	71 05       	cpc	r23, r1
    1390:	11 f4       	brne	.+4      	; 0x1396 <_ZN6String6concatEPKcj+0x16>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	1c c0       	rjmp	.+56     	; 0x13ce <_ZN6String6concatEPKcj+0x4e>
    1396:	41 15       	cp	r20, r1
    1398:	51 05       	cpc	r21, r1
    139a:	c1 f0       	breq	.+48     	; 0x13cc <_ZN6String6concatEPKcj+0x4c>
    139c:	7b 01       	movw	r14, r22
    139e:	ec 01       	movw	r28, r24
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	8a 01       	movw	r16, r20
    13a6:	08 0f       	add	r16, r24
    13a8:	19 1f       	adc	r17, r25
    13aa:	b8 01       	movw	r22, r16
    13ac:	ce 01       	movw	r24, r28
    13ae:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN6String7reserveEj>
    13b2:	88 23       	and	r24, r24
    13b4:	71 f3       	breq	.-36     	; 0x1392 <_ZN6String6concatEPKcj+0x12>
    13b6:	28 81       	ld	r18, Y
    13b8:	39 81       	ldd	r19, Y+1	; 0x01
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	b7 01       	movw	r22, r14
    13c0:	82 0f       	add	r24, r18
    13c2:	93 1f       	adc	r25, r19
    13c4:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <strcpy>
    13c8:	1d 83       	std	Y+5, r17	; 0x05
    13ca:	0c 83       	std	Y+4, r16	; 0x04
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	08 95       	ret

000013dc <_ZN6String6concatEc>:
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <_ZN6String6concatEc+0x6>
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	69 83       	std	Y+1, r22	; 0x01
    13e8:	1a 82       	std	Y+2, r1	; 0x02
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	be 01       	movw	r22, r28
    13f0:	6f 5f       	subi	r22, 0xFF	; 255
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN6String6concatEPKcj>
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    1402:	fc 01       	movw	r30, r24
    1404:	24 81       	ldd	r18, Z+4	; 0x04
    1406:	35 81       	ldd	r19, Z+5	; 0x05
    1408:	62 17       	cp	r22, r18
    140a:	73 07       	cpc	r23, r19
    140c:	20 f4       	brcc	.+8      	; 0x1416 <_ZN6StringixEj+0x14>
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	29 f4       	brne	.+10     	; 0x1420 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    1416:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <_ZZN6StringixEjE19dummy_writable_char>
		return dummy_writable_char;
    141a:	88 ef       	ldi	r24, 0xF8	; 248
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	08 95       	ret
	}
	return buffer[index];
    1420:	86 0f       	add	r24, r22
    1422:	97 1f       	adc	r25, r23
}
    1424:	08 95       	ret

00001426 <__vector_11>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZL7Channel>
    144c:	87 ff       	sbrs	r24, 7
    144e:	05 c0       	rjmp	.+10     	; 0x145a <__vector_11+0x34>
    1450:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1454:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1458:	1b c0       	rjmp	.+54     	; 0x1490 <__vector_11+0x6a>
    145a:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <_ZL7Channel>
    145e:	02 2e       	mov	r0, r18
    1460:	00 0c       	add	r0, r0
    1462:	33 0b       	sbc	r19, r19
    1464:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <ServoCount>
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	28 17       	cp	r18, r24
    146c:	39 07       	cpc	r19, r25
    146e:	84 f4       	brge	.+32     	; 0x1490 <__vector_11+0x6a>
    1470:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZL7Channel>
    1474:	08 2e       	mov	r0, r24
    1476:	00 0c       	add	r0, r0
    1478:	99 0b       	sbc	r25, r25
    147a:	fc 01       	movw	r30, r24
    147c:	ee 0f       	add	r30, r30
    147e:	ff 1f       	adc	r31, r31
    1480:	8e 0f       	add	r24, r30
    1482:	9f 1f       	adc	r25, r31
    1484:	fc 01       	movw	r30, r24
    1486:	e5 50       	subi	r30, 0x05	; 5
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	80 81       	ld	r24, Z
    148c:	86 fd       	sbrc	r24, 6
    148e:	15 c0       	rjmp	.+42     	; 0x14ba <__vector_11+0x94>
    1490:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZL7Channel>
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <_ZL7Channel>
    149a:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <_ZL7Channel>
    149e:	02 2e       	mov	r0, r18
    14a0:	00 0c       	add	r0, r0
    14a2:	33 0b       	sbc	r19, r19
    14a4:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <ServoCount>
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	28 17       	cp	r18, r24
    14ac:	39 07       	cpc	r19, r25
    14ae:	c4 f4       	brge	.+48     	; 0x14e0 <__vector_11+0xba>
    14b0:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZL7Channel>
    14b4:	8c 30       	cpi	r24, 0x0C	; 12
    14b6:	64 f1       	brlt	.+88     	; 0x1510 <__vector_11+0xea>
    14b8:	13 c0       	rjmp	.+38     	; 0x14e0 <__vector_11+0xba>
    14ba:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZL7Channel>
    14be:	08 2e       	mov	r0, r24
    14c0:	00 0c       	add	r0, r0
    14c2:	99 0b       	sbc	r25, r25
    14c4:	fc 01       	movw	r30, r24
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	8e 0f       	add	r24, r30
    14cc:	9f 1f       	adc	r25, r31
    14ce:	fc 01       	movw	r30, r24
    14d0:	e5 50       	subi	r30, 0x05	; 5
    14d2:	fe 4f       	sbci	r31, 0xFE	; 254
    14d4:	80 81       	ld	r24, Z
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	8f 73       	andi	r24, 0x3F	; 63
    14da:	0e 94 ca 08 	call	0x1194	; 0x1194 <digitalWrite>
    14de:	d8 cf       	rjmp	.-80     	; 0x1490 <__vector_11+0x6a>
    14e0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    14e4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    14e8:	04 96       	adiw	r24, 0x04	; 4
    14ea:	80 34       	cpi	r24, 0x40	; 64
    14ec:	9c 49       	sbci	r25, 0x9C	; 156
    14ee:	18 f4       	brcc	.+6      	; 0x14f6 <__vector_11+0xd0>
    14f0:	80 e4       	ldi	r24, 0x40	; 64
    14f2:	9c e9       	ldi	r25, 0x9C	; 156
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <__vector_11+0xda>
    14f6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    14fa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    14fe:	04 96       	adiw	r24, 0x04	; 4
    1500:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1504:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1508:	8f ef       	ldi	r24, 0xFF	; 255
    150a:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <_ZL7Channel>
    150e:	3b c0       	rjmp	.+118    	; 0x1586 <__vector_11+0x160>
    1510:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1514:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1518:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZL7Channel>
    151c:	08 2e       	mov	r0, r24
    151e:	00 0c       	add	r0, r0
    1520:	99 0b       	sbc	r25, r25
    1522:	fc 01       	movw	r30, r24
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	8e 0f       	add	r24, r30
    152a:	9f 1f       	adc	r25, r31
    152c:	fc 01       	movw	r30, r24
    152e:	e5 50       	subi	r30, 0x05	; 5
    1530:	fe 4f       	sbci	r31, 0xFE	; 254
    1532:	81 81       	ldd	r24, Z+1	; 0x01
    1534:	92 81       	ldd	r25, Z+2	; 0x02
    1536:	82 0f       	add	r24, r18
    1538:	93 1f       	adc	r25, r19
    153a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    153e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1542:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZL7Channel>
    1546:	08 2e       	mov	r0, r24
    1548:	00 0c       	add	r0, r0
    154a:	99 0b       	sbc	r25, r25
    154c:	fc 01       	movw	r30, r24
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	8e 0f       	add	r24, r30
    1554:	9f 1f       	adc	r25, r31
    1556:	fc 01       	movw	r30, r24
    1558:	e5 50       	subi	r30, 0x05	; 5
    155a:	fe 4f       	sbci	r31, 0xFE	; 254
    155c:	80 81       	ld	r24, Z
    155e:	86 ff       	sbrs	r24, 6
    1560:	12 c0       	rjmp	.+36     	; 0x1586 <__vector_11+0x160>
    1562:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZL7Channel>
    1566:	08 2e       	mov	r0, r24
    1568:	00 0c       	add	r0, r0
    156a:	99 0b       	sbc	r25, r25
    156c:	fc 01       	movw	r30, r24
    156e:	ee 0f       	add	r30, r30
    1570:	ff 1f       	adc	r31, r31
    1572:	8e 0f       	add	r24, r30
    1574:	9f 1f       	adc	r25, r31
    1576:	fc 01       	movw	r30, r24
    1578:	e5 50       	subi	r30, 0x05	; 5
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	80 81       	ld	r24, Z
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	8f 73       	andi	r24, 0x3F	; 63
    1582:	0e 94 ca 08 	call	0x1194	; 0x1194 <digitalWrite>
    1586:	ff 91       	pop	r31
    1588:	ef 91       	pop	r30
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	0f 90       	pop	r0
    15a4:	1f 90       	pop	r1
    15a6:	18 95       	reti

000015a8 <_ZN5ServoC1Ev>:
    15a8:	fc 01       	movw	r30, r24
    15aa:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <ServoCount>
    15ae:	9c 30       	cpi	r25, 0x0C	; 12
    15b0:	a0 f4       	brcc	.+40     	; 0x15da <_ZN5ServoC1Ev+0x32>
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	89 0f       	add	r24, r25
    15b6:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <ServoCount>
    15ba:	90 83       	st	Z, r25
    15bc:	89 2f       	mov	r24, r25
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	fc 01       	movw	r30, r24
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	8e 0f       	add	r24, r30
    15c8:	9f 1f       	adc	r25, r31
    15ca:	fc 01       	movw	r30, r24
    15cc:	e5 50       	subi	r30, 0x05	; 5
    15ce:	fe 4f       	sbci	r31, 0xFE	; 254
    15d0:	88 eb       	ldi	r24, 0xB8	; 184
    15d2:	9b e0       	ldi	r25, 0x0B	; 11
    15d4:	92 83       	std	Z+2, r25	; 0x02
    15d6:	81 83       	std	Z+1, r24	; 0x01
    15d8:	08 95       	ret
    15da:	8f ef       	ldi	r24, 0xFF	; 255
    15dc:	80 83       	st	Z, r24
    15de:	08 95       	ret

000015e0 <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    15e0:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    15e2:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    15e4:	9c 30       	cpi	r25, 0x0C	; 12
    15e6:	88 f5       	brcc	.+98     	; 0x164a <_ZN5Servo17writeMicrosecondsEi+0x6a>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    15e8:	81 81       	ldd	r24, Z+1	; 0x01
    15ea:	28 e8       	ldi	r18, 0x88	; 136
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	28 1b       	sub	r18, r24
    15f0:	31 09       	sbc	r19, r1
    15f2:	87 fd       	sbrc	r24, 7
    15f4:	33 95       	inc	r19
    15f6:	22 0f       	add	r18, r18
    15f8:	33 1f       	adc	r19, r19
    15fa:	22 0f       	add	r18, r18
    15fc:	33 1f       	adc	r19, r19
    15fe:	62 17       	cp	r22, r18
    1600:	73 07       	cpc	r23, r19
    1602:	84 f0       	brlt	.+32     	; 0x1624 <_ZN5Servo17writeMicrosecondsEi+0x44>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	48 e5       	ldi	r20, 0x58	; 88
    1608:	52 e0       	ldi	r21, 0x02	; 2
    160a:	48 1b       	sub	r20, r24
    160c:	51 09       	sbc	r21, r1
    160e:	87 fd       	sbrc	r24, 7
    1610:	53 95       	inc	r21
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	44 0f       	add	r20, r20
    1618:	55 1f       	adc	r21, r21
    161a:	9b 01       	movw	r18, r22
    161c:	46 17       	cp	r20, r22
    161e:	57 07       	cpc	r21, r23
    1620:	0c f4       	brge	.+2      	; 0x1624 <_ZN5Servo17writeMicrosecondsEi+0x44>
    1622:	9a 01       	movw	r18, r20
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    1624:	22 50       	subi	r18, 0x02	; 2
    1626:	31 09       	sbc	r19, r1
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19

    uint8_t oldSREG = SREG;
    162c:	4f b7       	in	r20, 0x3f	; 63
    cli();
    162e:	f8 94       	cli
    servos[channel].ticks = value;
    1630:	89 2f       	mov	r24, r25
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	fc 01       	movw	r30, r24
    1636:	ee 0f       	add	r30, r30
    1638:	ff 1f       	adc	r31, r31
    163a:	8e 0f       	add	r24, r30
    163c:	9f 1f       	adc	r25, r31
    163e:	fc 01       	movw	r30, r24
    1640:	e5 50       	subi	r30, 0x05	; 5
    1642:	fe 4f       	sbci	r31, 0xFE	; 254
    1644:	32 83       	std	Z+2, r19	; 0x02
    1646:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
    1648:	4f bf       	out	0x3f, r20	; 63
    164a:	08 95       	ret

0000164c <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{
    164c:	af 92       	push	r10
    164e:	bf 92       	push	r11
    1650:	cf 92       	push	r12
    1652:	df 92       	push	r13
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
    1662:	60 32       	cpi	r22, 0x20	; 32
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	78 07       	cpc	r23, r24
    1668:	0c f0       	brlt	.+2      	; 0x166c <_ZN5Servo5writeEi+0x20>
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <_ZN5Servo5writeEi+0x9e>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    166c:	77 fd       	sbrc	r23, 7
    166e:	06 c0       	rjmp	.+12     	; 0x167c <_ZN5Servo5writeEi+0x30>
    if(value > 180) value = 180;
    1670:	65 3b       	cpi	r22, 0xB5	; 181
    1672:	71 05       	cpc	r23, r1
    1674:	2c f0       	brlt	.+10     	; 0x1680 <_ZN5Servo5writeEi+0x34>
    1676:	64 eb       	ldi	r22, 0xB4	; 180
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <_ZN5Servo5writeEi+0x34>

void Servo::write(int value)
{
  if(value < MIN_PULSE_WIDTH)
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 e8       	ldi	r18, 0x88	; 136
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	59 01       	movw	r10, r18
    1688:	a8 1a       	sub	r10, r24
    168a:	b1 08       	sbc	r11, r1
    168c:	87 fd       	sbrc	r24, 7
    168e:	b3 94       	inc	r11
    1690:	aa 0c       	add	r10, r10
    1692:	bb 1c       	adc	r11, r11
    1694:	aa 0c       	add	r10, r10
    1696:	bb 1c       	adc	r11, r11
    1698:	0b 2c       	mov	r0, r11
    169a:	00 0c       	add	r0, r0
    169c:	cc 08       	sbc	r12, r12
    169e:	dd 08       	sbc	r13, r13
    16a0:	07 2e       	mov	r0, r23
    16a2:	00 0c       	add	r0, r0
    16a4:	88 0b       	sbc	r24, r24
    16a6:	99 0b       	sbc	r25, r25
    16a8:	2a 81       	ldd	r18, Y+2	; 0x02
    16aa:	08 e5       	ldi	r16, 0x58	; 88
    16ac:	12 e0       	ldi	r17, 0x02	; 2
    16ae:	02 1b       	sub	r16, r18
    16b0:	11 09       	sbc	r17, r1
    16b2:	27 fd       	sbrc	r18, 7
    16b4:	13 95       	inc	r17
    16b6:	00 0f       	add	r16, r16
    16b8:	11 1f       	adc	r17, r17
    16ba:	00 0f       	add	r16, r16
    16bc:	11 1f       	adc	r17, r17
    16be:	01 2e       	mov	r0, r17
    16c0:	00 0c       	add	r0, r0
    16c2:	22 0b       	sbc	r18, r18
    16c4:	33 0b       	sbc	r19, r19
    16c6:	3f 93       	push	r19
    16c8:	2f 93       	push	r18
    16ca:	1f 93       	push	r17
    16cc:	0f 93       	push	r16
    16ce:	14 eb       	ldi	r17, 0xB4	; 180
    16d0:	e1 2e       	mov	r14, r17
    16d2:	f1 2c       	mov	r15, r1
    16d4:	00 e0       	ldi	r16, 0x00	; 0
    16d6:	10 e0       	ldi	r17, 0x00	; 0
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	a9 01       	movw	r20, r18
    16de:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <_Z3maplllll>
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
    16ea:	ce 01       	movw	r24, r28
}
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	df 90       	pop	r13
    16fa:	cf 90       	pop	r12
    16fc:	bf 90       	pop	r11
    16fe:	af 90       	pop	r10
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());
  }
  this->writeMicroseconds(value);
    1700:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <_ZN5Servo17writeMicrosecondsEi>

00001704 <__mulsi3>:
    1704:	db 01       	movw	r26, r22
    1706:	8f 93       	push	r24
    1708:	9f 93       	push	r25
    170a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__muluhisi3>
    170e:	bf 91       	pop	r27
    1710:	af 91       	pop	r26
    1712:	a2 9f       	mul	r26, r18
    1714:	80 0d       	add	r24, r0
    1716:	91 1d       	adc	r25, r1
    1718:	a3 9f       	mul	r26, r19
    171a:	90 0d       	add	r25, r0
    171c:	b2 9f       	mul	r27, r18
    171e:	90 0d       	add	r25, r0
    1720:	11 24       	eor	r1, r1
    1722:	08 95       	ret

00001724 <__udivmodsi4>:
    1724:	a1 e2       	ldi	r26, 0x21	; 33
    1726:	1a 2e       	mov	r1, r26
    1728:	aa 1b       	sub	r26, r26
    172a:	bb 1b       	sub	r27, r27
    172c:	fd 01       	movw	r30, r26
    172e:	0d c0       	rjmp	.+26     	; 0x174a <__udivmodsi4_ep>

00001730 <__udivmodsi4_loop>:
    1730:	aa 1f       	adc	r26, r26
    1732:	bb 1f       	adc	r27, r27
    1734:	ee 1f       	adc	r30, r30
    1736:	ff 1f       	adc	r31, r31
    1738:	a2 17       	cp	r26, r18
    173a:	b3 07       	cpc	r27, r19
    173c:	e4 07       	cpc	r30, r20
    173e:	f5 07       	cpc	r31, r21
    1740:	20 f0       	brcs	.+8      	; 0x174a <__udivmodsi4_ep>
    1742:	a2 1b       	sub	r26, r18
    1744:	b3 0b       	sbc	r27, r19
    1746:	e4 0b       	sbc	r30, r20
    1748:	f5 0b       	sbc	r31, r21

0000174a <__udivmodsi4_ep>:
    174a:	66 1f       	adc	r22, r22
    174c:	77 1f       	adc	r23, r23
    174e:	88 1f       	adc	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	1a 94       	dec	r1
    1754:	69 f7       	brne	.-38     	; 0x1730 <__udivmodsi4_loop>
    1756:	60 95       	com	r22
    1758:	70 95       	com	r23
    175a:	80 95       	com	r24
    175c:	90 95       	com	r25
    175e:	9b 01       	movw	r18, r22
    1760:	ac 01       	movw	r20, r24
    1762:	bd 01       	movw	r22, r26
    1764:	cf 01       	movw	r24, r30
    1766:	08 95       	ret

00001768 <__divmodsi4>:
    1768:	05 2e       	mov	r0, r21
    176a:	97 fb       	bst	r25, 7
    176c:	1e f4       	brtc	.+6      	; 0x1774 <__divmodsi4+0xc>
    176e:	00 94       	com	r0
    1770:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__negsi2>
    1774:	57 fd       	sbrc	r21, 7
    1776:	07 d0       	rcall	.+14     	; 0x1786 <__divmodsi4_neg2>
    1778:	0e 94 92 0b 	call	0x1724	; 0x1724 <__udivmodsi4>
    177c:	07 fc       	sbrc	r0, 7
    177e:	03 d0       	rcall	.+6      	; 0x1786 <__divmodsi4_neg2>
    1780:	4e f4       	brtc	.+18     	; 0x1794 <__divmodsi4_exit>
    1782:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__negsi2>

00001786 <__divmodsi4_neg2>:
    1786:	50 95       	com	r21
    1788:	40 95       	com	r20
    178a:	30 95       	com	r19
    178c:	21 95       	neg	r18
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	4f 4f       	sbci	r20, 0xFF	; 255
    1792:	5f 4f       	sbci	r21, 0xFF	; 255

00001794 <__divmodsi4_exit>:
    1794:	08 95       	ret

00001796 <__negsi2>:
    1796:	90 95       	com	r25
    1798:	80 95       	com	r24
    179a:	70 95       	com	r23
    179c:	61 95       	neg	r22
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	8f 4f       	sbci	r24, 0xFF	; 255
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	08 95       	ret

000017a6 <__tablejump2__>:
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	05 90       	lpm	r0, Z+
    17ac:	f4 91       	lpm	r31, Z
    17ae:	e0 2d       	mov	r30, r0
    17b0:	09 94       	ijmp

000017b2 <__muluhisi3>:
    17b2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__umulhisi3>
    17b6:	a5 9f       	mul	r26, r21
    17b8:	90 0d       	add	r25, r0
    17ba:	b4 9f       	mul	r27, r20
    17bc:	90 0d       	add	r25, r0
    17be:	a4 9f       	mul	r26, r20
    17c0:	80 0d       	add	r24, r0
    17c2:	91 1d       	adc	r25, r1
    17c4:	11 24       	eor	r1, r1
    17c6:	08 95       	ret

000017c8 <__umulhisi3>:
    17c8:	a2 9f       	mul	r26, r18
    17ca:	b0 01       	movw	r22, r0
    17cc:	b3 9f       	mul	r27, r19
    17ce:	c0 01       	movw	r24, r0
    17d0:	a3 9f       	mul	r26, r19
    17d2:	70 0d       	add	r23, r0
    17d4:	81 1d       	adc	r24, r1
    17d6:	11 24       	eor	r1, r1
    17d8:	91 1d       	adc	r25, r1
    17da:	b2 9f       	mul	r27, r18
    17dc:	70 0d       	add	r23, r0
    17de:	81 1d       	adc	r24, r1
    17e0:	11 24       	eor	r1, r1
    17e2:	91 1d       	adc	r25, r1
    17e4:	08 95       	ret

000017e6 <malloc>:
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	82 30       	cpi	r24, 0x02	; 2
    17f0:	91 05       	cpc	r25, r1
    17f2:	10 f4       	brcc	.+4      	; 0x17f8 <malloc+0x12>
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <__flp>
    17fc:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <__flp+0x1>
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	a0 e0       	ldi	r26, 0x00	; 0
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	30 97       	sbiw	r30, 0x00	; 0
    180a:	19 f1       	breq	.+70     	; 0x1852 <malloc+0x6c>
    180c:	40 81       	ld	r20, Z
    180e:	51 81       	ldd	r21, Z+1	; 0x01
    1810:	02 81       	ldd	r16, Z+2	; 0x02
    1812:	13 81       	ldd	r17, Z+3	; 0x03
    1814:	48 17       	cp	r20, r24
    1816:	59 07       	cpc	r21, r25
    1818:	c8 f0       	brcs	.+50     	; 0x184c <malloc+0x66>
    181a:	84 17       	cp	r24, r20
    181c:	95 07       	cpc	r25, r21
    181e:	69 f4       	brne	.+26     	; 0x183a <malloc+0x54>
    1820:	10 97       	sbiw	r26, 0x00	; 0
    1822:	31 f0       	breq	.+12     	; 0x1830 <malloc+0x4a>
    1824:	12 96       	adiw	r26, 0x02	; 2
    1826:	0c 93       	st	X, r16
    1828:	12 97       	sbiw	r26, 0x02	; 2
    182a:	13 96       	adiw	r26, 0x03	; 3
    182c:	1c 93       	st	X, r17
    182e:	27 c0       	rjmp	.+78     	; 0x187e <malloc+0x98>
    1830:	00 93 21 02 	sts	0x0221, r16	; 0x800221 <__flp>
    1834:	10 93 22 02 	sts	0x0222, r17	; 0x800222 <__flp+0x1>
    1838:	22 c0       	rjmp	.+68     	; 0x187e <malloc+0x98>
    183a:	21 15       	cp	r18, r1
    183c:	31 05       	cpc	r19, r1
    183e:	19 f0       	breq	.+6      	; 0x1846 <malloc+0x60>
    1840:	42 17       	cp	r20, r18
    1842:	53 07       	cpc	r21, r19
    1844:	18 f4       	brcc	.+6      	; 0x184c <malloc+0x66>
    1846:	9a 01       	movw	r18, r20
    1848:	bd 01       	movw	r22, r26
    184a:	ef 01       	movw	r28, r30
    184c:	df 01       	movw	r26, r30
    184e:	f8 01       	movw	r30, r16
    1850:	db cf       	rjmp	.-74     	; 0x1808 <malloc+0x22>
    1852:	21 15       	cp	r18, r1
    1854:	31 05       	cpc	r19, r1
    1856:	f9 f0       	breq	.+62     	; 0x1896 <malloc+0xb0>
    1858:	28 1b       	sub	r18, r24
    185a:	39 0b       	sbc	r19, r25
    185c:	24 30       	cpi	r18, 0x04	; 4
    185e:	31 05       	cpc	r19, r1
    1860:	80 f4       	brcc	.+32     	; 0x1882 <malloc+0x9c>
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	9b 81       	ldd	r25, Y+3	; 0x03
    1866:	61 15       	cp	r22, r1
    1868:	71 05       	cpc	r23, r1
    186a:	21 f0       	breq	.+8      	; 0x1874 <malloc+0x8e>
    186c:	fb 01       	movw	r30, r22
    186e:	93 83       	std	Z+3, r25	; 0x03
    1870:	82 83       	std	Z+2, r24	; 0x02
    1872:	04 c0       	rjmp	.+8      	; 0x187c <malloc+0x96>
    1874:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <__flp+0x1>
    1878:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__flp>
    187c:	fe 01       	movw	r30, r28
    187e:	32 96       	adiw	r30, 0x02	; 2
    1880:	44 c0       	rjmp	.+136    	; 0x190a <malloc+0x124>
    1882:	fe 01       	movw	r30, r28
    1884:	e2 0f       	add	r30, r18
    1886:	f3 1f       	adc	r31, r19
    1888:	81 93       	st	Z+, r24
    188a:	91 93       	st	Z+, r25
    188c:	22 50       	subi	r18, 0x02	; 2
    188e:	31 09       	sbc	r19, r1
    1890:	39 83       	std	Y+1, r19	; 0x01
    1892:	28 83       	st	Y, r18
    1894:	3a c0       	rjmp	.+116    	; 0x190a <malloc+0x124>
    1896:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <__brkval>
    189a:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <__brkval+0x1>
    189e:	23 2b       	or	r18, r19
    18a0:	41 f4       	brne	.+16     	; 0x18b2 <malloc+0xcc>
    18a2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    18a6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    18aa:	30 93 20 02 	sts	0x0220, r19	; 0x800220 <__brkval+0x1>
    18ae:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <__brkval>
    18b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    18b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    18ba:	21 15       	cp	r18, r1
    18bc:	31 05       	cpc	r19, r1
    18be:	41 f4       	brne	.+16     	; 0x18d0 <malloc+0xea>
    18c0:	2d b7       	in	r18, 0x3d	; 61
    18c2:	3e b7       	in	r19, 0x3e	; 62
    18c4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    18c8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    18cc:	24 1b       	sub	r18, r20
    18ce:	35 0b       	sbc	r19, r21
    18d0:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <__brkval>
    18d4:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <__brkval+0x1>
    18d8:	e2 17       	cp	r30, r18
    18da:	f3 07       	cpc	r31, r19
    18dc:	a0 f4       	brcc	.+40     	; 0x1906 <malloc+0x120>
    18de:	2e 1b       	sub	r18, r30
    18e0:	3f 0b       	sbc	r19, r31
    18e2:	28 17       	cp	r18, r24
    18e4:	39 07       	cpc	r19, r25
    18e6:	78 f0       	brcs	.+30     	; 0x1906 <malloc+0x120>
    18e8:	ac 01       	movw	r20, r24
    18ea:	4e 5f       	subi	r20, 0xFE	; 254
    18ec:	5f 4f       	sbci	r21, 0xFF	; 255
    18ee:	24 17       	cp	r18, r20
    18f0:	35 07       	cpc	r19, r21
    18f2:	48 f0       	brcs	.+18     	; 0x1906 <malloc+0x120>
    18f4:	4e 0f       	add	r20, r30
    18f6:	5f 1f       	adc	r21, r31
    18f8:	50 93 20 02 	sts	0x0220, r21	; 0x800220 <__brkval+0x1>
    18fc:	40 93 1f 02 	sts	0x021F, r20	; 0x80021f <__brkval>
    1900:	81 93       	st	Z+, r24
    1902:	91 93       	st	Z+, r25
    1904:	02 c0       	rjmp	.+4      	; 0x190a <malloc+0x124>
    1906:	e0 e0       	ldi	r30, 0x00	; 0
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	cf 01       	movw	r24, r30
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <free>:
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	09 f4       	brne	.+2      	; 0x1920 <free+0xa>
    191e:	81 c0       	rjmp	.+258    	; 0x1a22 <free+0x10c>
    1920:	fc 01       	movw	r30, r24
    1922:	32 97       	sbiw	r30, 0x02	; 2
    1924:	13 82       	std	Z+3, r1	; 0x03
    1926:	12 82       	std	Z+2, r1	; 0x02
    1928:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <__flp>
    192c:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <__flp+0x1>
    1930:	10 97       	sbiw	r26, 0x00	; 0
    1932:	81 f4       	brne	.+32     	; 0x1954 <free+0x3e>
    1934:	20 81       	ld	r18, Z
    1936:	31 81       	ldd	r19, Z+1	; 0x01
    1938:	82 0f       	add	r24, r18
    193a:	93 1f       	adc	r25, r19
    193c:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <__brkval>
    1940:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <__brkval+0x1>
    1944:	28 17       	cp	r18, r24
    1946:	39 07       	cpc	r19, r25
    1948:	51 f5       	brne	.+84     	; 0x199e <free+0x88>
    194a:	f0 93 20 02 	sts	0x0220, r31	; 0x800220 <__brkval+0x1>
    194e:	e0 93 1f 02 	sts	0x021F, r30	; 0x80021f <__brkval>
    1952:	67 c0       	rjmp	.+206    	; 0x1a22 <free+0x10c>
    1954:	ed 01       	movw	r28, r26
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	ce 17       	cp	r28, r30
    195c:	df 07       	cpc	r29, r31
    195e:	40 f4       	brcc	.+16     	; 0x1970 <free+0x5a>
    1960:	4a 81       	ldd	r20, Y+2	; 0x02
    1962:	5b 81       	ldd	r21, Y+3	; 0x03
    1964:	9e 01       	movw	r18, r28
    1966:	41 15       	cp	r20, r1
    1968:	51 05       	cpc	r21, r1
    196a:	f1 f0       	breq	.+60     	; 0x19a8 <free+0x92>
    196c:	ea 01       	movw	r28, r20
    196e:	f5 cf       	rjmp	.-22     	; 0x195a <free+0x44>
    1970:	d3 83       	std	Z+3, r29	; 0x03
    1972:	c2 83       	std	Z+2, r28	; 0x02
    1974:	40 81       	ld	r20, Z
    1976:	51 81       	ldd	r21, Z+1	; 0x01
    1978:	84 0f       	add	r24, r20
    197a:	95 1f       	adc	r25, r21
    197c:	c8 17       	cp	r28, r24
    197e:	d9 07       	cpc	r29, r25
    1980:	59 f4       	brne	.+22     	; 0x1998 <free+0x82>
    1982:	88 81       	ld	r24, Y
    1984:	99 81       	ldd	r25, Y+1	; 0x01
    1986:	84 0f       	add	r24, r20
    1988:	95 1f       	adc	r25, r21
    198a:	02 96       	adiw	r24, 0x02	; 2
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	9b 81       	ldd	r25, Y+3	; 0x03
    1994:	93 83       	std	Z+3, r25	; 0x03
    1996:	82 83       	std	Z+2, r24	; 0x02
    1998:	21 15       	cp	r18, r1
    199a:	31 05       	cpc	r19, r1
    199c:	29 f4       	brne	.+10     	; 0x19a8 <free+0x92>
    199e:	f0 93 22 02 	sts	0x0222, r31	; 0x800222 <__flp+0x1>
    19a2:	e0 93 21 02 	sts	0x0221, r30	; 0x800221 <__flp>
    19a6:	3d c0       	rjmp	.+122    	; 0x1a22 <free+0x10c>
    19a8:	e9 01       	movw	r28, r18
    19aa:	fb 83       	std	Y+3, r31	; 0x03
    19ac:	ea 83       	std	Y+2, r30	; 0x02
    19ae:	49 91       	ld	r20, Y+
    19b0:	59 91       	ld	r21, Y+
    19b2:	c4 0f       	add	r28, r20
    19b4:	d5 1f       	adc	r29, r21
    19b6:	ec 17       	cp	r30, r28
    19b8:	fd 07       	cpc	r31, r29
    19ba:	61 f4       	brne	.+24     	; 0x19d4 <free+0xbe>
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	84 0f       	add	r24, r20
    19c2:	95 1f       	adc	r25, r21
    19c4:	02 96       	adiw	r24, 0x02	; 2
    19c6:	e9 01       	movw	r28, r18
    19c8:	99 83       	std	Y+1, r25	; 0x01
    19ca:	88 83       	st	Y, r24
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	9b 83       	std	Y+3, r25	; 0x03
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	e0 e0       	ldi	r30, 0x00	; 0
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	12 96       	adiw	r26, 0x02	; 2
    19da:	8d 91       	ld	r24, X+
    19dc:	9c 91       	ld	r25, X
    19de:	13 97       	sbiw	r26, 0x03	; 3
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	19 f0       	breq	.+6      	; 0x19ea <free+0xd4>
    19e4:	fd 01       	movw	r30, r26
    19e6:	dc 01       	movw	r26, r24
    19e8:	f7 cf       	rjmp	.-18     	; 0x19d8 <free+0xc2>
    19ea:	8d 91       	ld	r24, X+
    19ec:	9c 91       	ld	r25, X
    19ee:	11 97       	sbiw	r26, 0x01	; 1
    19f0:	9d 01       	movw	r18, r26
    19f2:	2e 5f       	subi	r18, 0xFE	; 254
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	82 0f       	add	r24, r18
    19f8:	93 1f       	adc	r25, r19
    19fa:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <__brkval>
    19fe:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <__brkval+0x1>
    1a02:	28 17       	cp	r18, r24
    1a04:	39 07       	cpc	r19, r25
    1a06:	69 f4       	brne	.+26     	; 0x1a22 <free+0x10c>
    1a08:	30 97       	sbiw	r30, 0x00	; 0
    1a0a:	29 f4       	brne	.+10     	; 0x1a16 <free+0x100>
    1a0c:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__flp+0x1>
    1a10:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <__flp>
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <free+0x104>
    1a16:	13 82       	std	Z+3, r1	; 0x03
    1a18:	12 82       	std	Z+2, r1	; 0x02
    1a1a:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <__brkval+0x1>
    1a1e:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <__brkval>
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <realloc>:
    1a28:	a0 e0       	ldi	r26, 0x00	; 0
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ea e1       	ldi	r30, 0x1A	; 26
    1a2e:	fd e0       	ldi	r31, 0x0D	; 13
    1a30:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__prologue_saves__+0x8>
    1a34:	ec 01       	movw	r28, r24
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	21 f4       	brne	.+8      	; 0x1a42 <realloc+0x1a>
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <malloc>
    1a40:	b4 c0       	rjmp	.+360    	; 0x1baa <realloc+0x182>
    1a42:	fc 01       	movw	r30, r24
    1a44:	e6 0f       	add	r30, r22
    1a46:	f7 1f       	adc	r31, r23
    1a48:	9c 01       	movw	r18, r24
    1a4a:	22 50       	subi	r18, 0x02	; 2
    1a4c:	31 09       	sbc	r19, r1
    1a4e:	e2 17       	cp	r30, r18
    1a50:	f3 07       	cpc	r31, r19
    1a52:	08 f4       	brcc	.+2      	; 0x1a56 <realloc+0x2e>
    1a54:	a8 c0       	rjmp	.+336    	; 0x1ba6 <realloc+0x17e>
    1a56:	d9 01       	movw	r26, r18
    1a58:	0d 91       	ld	r16, X+
    1a5a:	1c 91       	ld	r17, X
    1a5c:	11 97       	sbiw	r26, 0x01	; 1
    1a5e:	06 17       	cp	r16, r22
    1a60:	17 07       	cpc	r17, r23
    1a62:	b0 f0       	brcs	.+44     	; 0x1a90 <realloc+0x68>
    1a64:	05 30       	cpi	r16, 0x05	; 5
    1a66:	11 05       	cpc	r17, r1
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <realloc+0x44>
    1a6a:	9b c0       	rjmp	.+310    	; 0x1ba2 <realloc+0x17a>
    1a6c:	c8 01       	movw	r24, r16
    1a6e:	04 97       	sbiw	r24, 0x04	; 4
    1a70:	86 17       	cp	r24, r22
    1a72:	97 07       	cpc	r25, r23
    1a74:	08 f4       	brcc	.+2      	; 0x1a78 <realloc+0x50>
    1a76:	95 c0       	rjmp	.+298    	; 0x1ba2 <realloc+0x17a>
    1a78:	02 50       	subi	r16, 0x02	; 2
    1a7a:	11 09       	sbc	r17, r1
    1a7c:	06 1b       	sub	r16, r22
    1a7e:	17 0b       	sbc	r17, r23
    1a80:	01 93       	st	Z+, r16
    1a82:	11 93       	st	Z+, r17
    1a84:	6d 93       	st	X+, r22
    1a86:	7c 93       	st	X, r23
    1a88:	cf 01       	movw	r24, r30
    1a8a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <free>
    1a8e:	89 c0       	rjmp	.+274    	; 0x1ba2 <realloc+0x17a>
    1a90:	5b 01       	movw	r10, r22
    1a92:	a0 1a       	sub	r10, r16
    1a94:	b1 0a       	sbc	r11, r17
    1a96:	4c 01       	movw	r8, r24
    1a98:	80 0e       	add	r8, r16
    1a9a:	91 1e       	adc	r9, r17
    1a9c:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <__flp>
    1aa0:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <__flp+0x1>
    1aa4:	61 2c       	mov	r6, r1
    1aa6:	71 2c       	mov	r7, r1
    1aa8:	e1 2c       	mov	r14, r1
    1aaa:	f1 2c       	mov	r15, r1
    1aac:	10 97       	sbiw	r26, 0x00	; 0
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <realloc+0x8a>
    1ab0:	46 c0       	rjmp	.+140    	; 0x1b3e <realloc+0x116>
    1ab2:	8d 91       	ld	r24, X+
    1ab4:	9c 91       	ld	r25, X
    1ab6:	11 97       	sbiw	r26, 0x01	; 1
    1ab8:	a8 15       	cp	r26, r8
    1aba:	b9 05       	cpc	r27, r9
    1abc:	b1 f5       	brne	.+108    	; 0x1b2a <realloc+0x102>
    1abe:	6c 01       	movw	r12, r24
    1ac0:	42 e0       	ldi	r20, 0x02	; 2
    1ac2:	c4 0e       	add	r12, r20
    1ac4:	d1 1c       	adc	r13, r1
    1ac6:	ca 14       	cp	r12, r10
    1ac8:	db 04       	cpc	r13, r11
    1aca:	78 f1       	brcs	.+94     	; 0x1b2a <realloc+0x102>
    1acc:	4c 01       	movw	r8, r24
    1ace:	8a 18       	sub	r8, r10
    1ad0:	9b 08       	sbc	r9, r11
    1ad2:	64 01       	movw	r12, r8
    1ad4:	42 e0       	ldi	r20, 0x02	; 2
    1ad6:	c4 0e       	add	r12, r20
    1ad8:	d1 1c       	adc	r13, r1
    1ada:	12 96       	adiw	r26, 0x02	; 2
    1adc:	bc 90       	ld	r11, X
    1ade:	12 97       	sbiw	r26, 0x02	; 2
    1ae0:	13 96       	adiw	r26, 0x03	; 3
    1ae2:	ac 91       	ld	r26, X
    1ae4:	b5 e0       	ldi	r27, 0x05	; 5
    1ae6:	cb 16       	cp	r12, r27
    1ae8:	d1 04       	cpc	r13, r1
    1aea:	40 f0       	brcs	.+16     	; 0x1afc <realloc+0xd4>
    1aec:	b2 82       	std	Z+2, r11	; 0x02
    1aee:	a3 83       	std	Z+3, r26	; 0x03
    1af0:	91 82       	std	Z+1, r9	; 0x01
    1af2:	80 82       	st	Z, r8
    1af4:	d9 01       	movw	r26, r18
    1af6:	6d 93       	st	X+, r22
    1af8:	7c 93       	st	X, r23
    1afa:	09 c0       	rjmp	.+18     	; 0x1b0e <realloc+0xe6>
    1afc:	0e 5f       	subi	r16, 0xFE	; 254
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
    1b00:	80 0f       	add	r24, r16
    1b02:	91 1f       	adc	r25, r17
    1b04:	f9 01       	movw	r30, r18
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
    1b0a:	eb 2d       	mov	r30, r11
    1b0c:	fa 2f       	mov	r31, r26
    1b0e:	e1 14       	cp	r14, r1
    1b10:	f1 04       	cpc	r15, r1
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <realloc+0xf8>
    1b14:	d7 01       	movw	r26, r14
    1b16:	13 96       	adiw	r26, 0x03	; 3
    1b18:	fc 93       	st	X, r31
    1b1a:	ee 93       	st	-X, r30
    1b1c:	12 97       	sbiw	r26, 0x02	; 2
    1b1e:	41 c0       	rjmp	.+130    	; 0x1ba2 <realloc+0x17a>
    1b20:	f0 93 22 02 	sts	0x0222, r31	; 0x800222 <__flp+0x1>
    1b24:	e0 93 21 02 	sts	0x0221, r30	; 0x800221 <__flp>
    1b28:	3c c0       	rjmp	.+120    	; 0x1ba2 <realloc+0x17a>
    1b2a:	68 16       	cp	r6, r24
    1b2c:	79 06       	cpc	r7, r25
    1b2e:	08 f4       	brcc	.+2      	; 0x1b32 <realloc+0x10a>
    1b30:	3c 01       	movw	r6, r24
    1b32:	7d 01       	movw	r14, r26
    1b34:	12 96       	adiw	r26, 0x02	; 2
    1b36:	0d 90       	ld	r0, X+
    1b38:	bc 91       	ld	r27, X
    1b3a:	a0 2d       	mov	r26, r0
    1b3c:	b7 cf       	rjmp	.-146    	; 0x1aac <realloc+0x84>
    1b3e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <__brkval>
    1b42:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <__brkval+0x1>
    1b46:	88 16       	cp	r8, r24
    1b48:	99 06       	cpc	r9, r25
    1b4a:	e1 f4       	brne	.+56     	; 0x1b84 <realloc+0x15c>
    1b4c:	66 16       	cp	r6, r22
    1b4e:	77 06       	cpc	r7, r23
    1b50:	c8 f4       	brcc	.+50     	; 0x1b84 <realloc+0x15c>
    1b52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b56:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	41 f4       	brne	.+16     	; 0x1b6e <realloc+0x146>
    1b5e:	8d b7       	in	r24, 0x3d	; 61
    1b60:	9e b7       	in	r25, 0x3e	; 62
    1b62:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1b66:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1b6a:	84 1b       	sub	r24, r20
    1b6c:	95 0b       	sbc	r25, r21
    1b6e:	e8 17       	cp	r30, r24
    1b70:	f9 07       	cpc	r31, r25
    1b72:	c8 f4       	brcc	.+50     	; 0x1ba6 <realloc+0x17e>
    1b74:	f0 93 20 02 	sts	0x0220, r31	; 0x800220 <__brkval+0x1>
    1b78:	e0 93 1f 02 	sts	0x021F, r30	; 0x80021f <__brkval>
    1b7c:	f9 01       	movw	r30, r18
    1b7e:	71 83       	std	Z+1, r23	; 0x01
    1b80:	60 83       	st	Z, r22
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <realloc+0x17a>
    1b84:	cb 01       	movw	r24, r22
    1b86:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <malloc>
    1b8a:	7c 01       	movw	r14, r24
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	59 f0       	breq	.+22     	; 0x1ba6 <realloc+0x17e>
    1b90:	a8 01       	movw	r20, r16
    1b92:	be 01       	movw	r22, r28
    1b94:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <memcpy>
    1b98:	ce 01       	movw	r24, r28
    1b9a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <free>
    1b9e:	c7 01       	movw	r24, r14
    1ba0:	04 c0       	rjmp	.+8      	; 0x1baa <realloc+0x182>
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <realloc+0x182>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	ee e0       	ldi	r30, 0x0E	; 14
    1bb0:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__epilogue_restores__+0x8>

00001bb4 <memcpy>:
    1bb4:	fb 01       	movw	r30, r22
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <memcpy+0xa>
    1bba:	01 90       	ld	r0, Z+
    1bbc:	0d 92       	st	X+, r0
    1bbe:	41 50       	subi	r20, 0x01	; 1
    1bc0:	50 40       	sbci	r21, 0x00	; 0
    1bc2:	d8 f7       	brcc	.-10     	; 0x1bba <memcpy+0x6>
    1bc4:	08 95       	ret

00001bc6 <strcpy>:
    1bc6:	fb 01       	movw	r30, r22
    1bc8:	dc 01       	movw	r26, r24
    1bca:	01 90       	ld	r0, Z+
    1bcc:	0d 92       	st	X+, r0
    1bce:	00 20       	and	r0, r0
    1bd0:	e1 f7       	brne	.-8      	; 0x1bca <strcpy+0x4>
    1bd2:	08 95       	ret

00001bd4 <__prologue_saves__>:
    1bd4:	2f 92       	push	r2
    1bd6:	3f 92       	push	r3
    1bd8:	4f 92       	push	r4
    1bda:	5f 92       	push	r5
    1bdc:	6f 92       	push	r6
    1bde:	7f 92       	push	r7
    1be0:	8f 92       	push	r8
    1be2:	9f 92       	push	r9
    1be4:	af 92       	push	r10
    1be6:	bf 92       	push	r11
    1be8:	cf 92       	push	r12
    1bea:	df 92       	push	r13
    1bec:	ef 92       	push	r14
    1bee:	ff 92       	push	r15
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	ca 1b       	sub	r28, r26
    1bfe:	db 0b       	sbc	r29, r27
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	09 94       	ijmp

00001c0c <__epilogue_restores__>:
    1c0c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c0e:	39 88       	ldd	r3, Y+17	; 0x11
    1c10:	48 88       	ldd	r4, Y+16	; 0x10
    1c12:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c14:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c16:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c18:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c1e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c20:	c8 84       	ldd	r12, Y+8	; 0x08
    1c22:	df 80       	ldd	r13, Y+7	; 0x07
    1c24:	ee 80       	ldd	r14, Y+6	; 0x06
    1c26:	fd 80       	ldd	r15, Y+5	; 0x05
    1c28:	0c 81       	ldd	r16, Y+4	; 0x04
    1c2a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c2c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c2e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c30:	ce 0f       	add	r28, r30
    1c32:	d1 1d       	adc	r29, r1
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	ed 01       	movw	r28, r26
    1c40:	08 95       	ret

00001c42 <_exit>:
    1c42:	f8 94       	cli

00001c44 <__stop_program>:
    1c44:	ff cf       	rjmp	.-2      	; 0x1c44 <__stop_program>
